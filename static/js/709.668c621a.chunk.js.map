{"version":3,"file":"static/js/709.668c621a.chunk.js","mappings":"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","sources":["Views/Admin/Apointment/DoctorRoaster/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { DEPARTMENT, DOCTOR, DOCTOR_ROSTER, APPOINTMENT } from \"../../../../config/apiConfig\";\r\nimport { getRequest, putRequest, postRequest } from \"../../../../service/apiService\";\r\nimport LoadingScreen from \"../../../../Components/Loading\";\r\nimport Popup from \"../../../../Components/popup\";\r\n\r\nconst DoctorRoaster = () => {\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [doctor, setDoctor] = useState(\"\");\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [departmentData, setDepartmentData] = useState([]);\r\n  const [doctorData, setDoctorData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [rosterDoctorData, setRosterDoctorData] = useState(null);\r\n  const [popup, setPopup] = useState(\"\");\r\n  const [popupMessage, setPopupMessage] = useState(\"\");\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  const showPopup = (message, type = \"info\") => {\r\n    setPopupMessage({\r\n      message,\r\n      type,\r\n      onClose: () => {\r\n        setPopupMessage(null);\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDepartmentData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (department) {\r\n      fetchDoctorData();\r\n    }\r\n  }, [department]);\r\n\r\n  useEffect(() => {\r\n    if (department && fromDate) {\r\n      prepareRosterData();\r\n    }\r\n  }, [department, doctor, fromDate, doctorData]);\r\n\r\n  const fetchDepartmentData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getRequest(`${DEPARTMENT}/getAllDepartments/1`);\r\n      if (data.status === 200 && Array.isArray(data.response)) {\r\n        setDepartmentData(data.response);\r\n      } else {\r\n        console.error(\"Unexpected API response format:\", data);\r\n        setDepartmentData([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching Department data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchDoctorData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getRequest(`${DOCTOR}/doctorBySpeciality/${department}`);\r\n      if (data.status === 200 && Array.isArray(data.response)) {\r\n        setDoctorData(data.response);\r\n      } else {\r\n        console.error(\"Unexpected API response format:\", data);\r\n        setDoctorData([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching Doctor data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateDatesFromSelectedDate = () => {\r\n    if (!fromDate) return [];\r\n  \r\n    const startDate = new Date(fromDate);\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0); \r\n  \r\n    const dates = [];\r\n  \r\n    for (let i = 0; i < 7; i++) {\r\n      const currentDate = new Date(startDate);\r\n      currentDate.setDate(startDate.getDate() + i);\r\n      currentDate.setHours(0, 0, 0, 0); \r\n  \r\n      if (currentDate > today) {\r\n        const formattedDate = `${currentDate.getDate().toString().padStart(2, '0')}/${(currentDate.getMonth() + 1).toString().padStart(2, '0')}/${currentDate.getFullYear()}`;\r\n        \r\n        dates.push(formattedDate);\r\n      }\r\n    }\r\n  \r\n    let doctorsToUse = [];\r\n  \r\n    if (doctor) {\r\n      const selectedDoctor = doctorData.find(doc => doc.userId === parseInt(doctor));\r\n      if (selectedDoctor) {\r\n        doctorsToUse = [{\r\n          name: `${selectedDoctor.firstName} ${selectedDoctor.lastName}`,\r\n          id: selectedDoctor.userId\r\n        }];\r\n      }\r\n    } else {\r\n      doctorsToUse = doctorData.map(doc => ({\r\n        name: `${doc.firstName} ${doc.lastName}`,\r\n        id: doc.userId\r\n      }));\r\n    }\r\n  \r\n    const generatedDates = doctorsToUse.flatMap(doctorInfo => \r\n      dates.map(date => ({\r\n        dates: date,\r\n        rosterVale: \"YY\", \r\n        doctorId: doctorInfo.id,\r\n        id: null \r\n      }))\r\n    );\r\n  \r\n    return generatedDates;\r\n  };\r\n\r\n  const prepareRosterData = async () => {\r\n    if (!department || !fromDate) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const queryParams = new URLSearchParams({\r\n        deptId: department,\r\n        rosterDate: fromDate,\r\n      });\r\n\r\n      if (doctor) {\r\n        queryParams.append(\"doctorId\", doctor);\r\n      }\r\n\r\n      const apiUrl = `${DOCTOR_ROSTER}/rosterfindWithDays?${queryParams.toString()}`;\r\n      const existingRosterResponse = await getRequest(apiUrl);\r\n\r\n      const generatedDates = generateDatesFromSelectedDate();\r\n\r\n      let mergedDates = [];\r\n      if (existingRosterResponse.response && existingRosterResponse.response.dates) {\r\n        const existingDates = existingRosterResponse.response.dates;\r\n\r\n        const existingDatesMap = new Map();\r\n        existingDates.forEach(date => {\r\n          const key = `${date.doctorId}-${date.dates}`;\r\n          existingDatesMap.set(key, date);\r\n        });\r\n\r\n        mergedDates = generatedDates.map(genDate => {\r\n          const key = `${genDate.doctorId}-${genDate.dates}`;\r\n          const existingDate = existingDatesMap.get(key);\r\n          \r\n          return existingDate || genDate;\r\n        });\r\n\r\n        existingDates.forEach(existDate => {\r\n          const key = `${existDate.doctorId}-${existDate.dates}`;\r\n          if (!mergedDates.some(md => `${md.doctorId}-${md.dates}` === key)) {\r\n            mergedDates.push(existDate);\r\n          }\r\n        });\r\n      } else {\r\n        mergedDates = generatedDates;\r\n      }\r\n\r\n      const rosterData = {\r\n        departmentId: parseInt(department),\r\n        fromDate: fromDate,\r\n        dates: mergedDates\r\n      };\r\n\r\n      setRosterDoctorData(rosterData);\r\n    } catch (error) {\r\n      console.error(\"Error preparing roster data:\", error);\r\n      showPopup(\"Error preparing roster data\", \"error\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCheckboxChange = (doctorId, date, session) => {\r\n    const formattedDate = formatDateToLocal(date);\r\n    if (formattedDate < currentDate) return;\r\n\r\n    const updatedDates = rosterDoctorData.dates.map(item => {\r\n      if (item.doctorId === doctorId && item.dates === date) {\r\n        let newRosterValue;\r\n        switch(item.rosterVale) {\r\n          case \"YY\":\r\n            newRosterValue = session === 'morning' ? \"NY\" : \"YN\";\r\n            break;\r\n          case \"YN\":\r\n            newRosterValue = session === 'morning' ? \"NN\" : \"YY\";\r\n            break;\r\n          case \"NY\":\r\n            newRosterValue = session === 'morning' ? \"YY\" : \"NN\";\r\n            break;\r\n          case \"NN\":\r\n            newRosterValue = session === 'morning' ? \"YN\" : \"NY\";\r\n            break;\r\n          default:\r\n            newRosterValue = \"YY\";\r\n        }\r\n\r\n        return { ...item, rosterVale: newRosterValue };\r\n      }\r\n      return item;\r\n    });\r\n\r\n    setRosterDoctorData(prev => ({\r\n      ...prev,\r\n      dates: updatedDates\r\n    }));\r\n  };\r\n\r\n  const formatDateToLocal = (dateString) => {\r\n    const [day, month, year] = dateString.split('/');\r\n    return new Date(`${year}-${month}-${day}`);\r\n  };\r\n\r\n  const formatDisplayDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const [day, month, year] = dateString.split('/');\r\n    const date = new Date(`${year}-${month}-${day}`);\r\n    return date.toLocaleDateString('en-US', { day: '2-digit', month: 'short', year: 'numeric' });\r\n  };\r\n\r\n  const isDateDisabled = (dateString) => {\r\n    const rosterDate = formatDateToLocal(dateString);\r\n    return rosterDate < currentDate;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!department || !fromDate) {\r\n      showPopup(\"Please select Department and From Date\", \"error\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const endpoint = `${DOCTOR_ROSTER}/roster`;\r\n      const response = await postRequest(endpoint, rosterDoctorData);\r\n\r\n      if (response.status === 200) {\r\n        showPopup(\"Roster saved successfully!\", \"success\");\r\n        prepareRosterData(); \r\n      } else {\r\n        showPopup(`Error saving roster: ${response.message || \"Unknown error\"}`, \"error\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving roster:\", error);\r\n      showPopup(\"An error occurred while saving the roster\", \"error\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setDepartment(\"\");\r\n    setDoctor(\"\");\r\n    setFromDate(\"\");\r\n    setRosterDoctorData(null);\r\n  };\r\n\r\n  const renderRosterTable = () => {\r\n    if (!rosterDoctorData || !rosterDoctorData.dates || rosterDoctorData.dates.length === 0) return null;\r\n\r\n    const doctorRosterMap = new Map();\r\n    rosterDoctorData.dates.forEach(item => {\r\n      if (!doctorRosterMap.has(item.doctorId)) {\r\n        doctorRosterMap.set(item.doctorId, []);\r\n      }\r\n      doctorRosterMap.get(item.doctorId).push(item);\r\n    });\r\n\r\n    const allDates = [...new Set(rosterDoctorData.dates.map(item => item.dates))].sort((a, b) => {\r\n      const dateA = formatDateToLocal(a);\r\n      const dateB = formatDateToLocal(b);\r\n      return dateA - dateB;\r\n    });\r\n\r\n    return (\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Doctor</th>\r\n              {allDates.map(date => (\r\n                <th key={date} className=\"text-center\">\r\n                  {formatDisplayDate(date)}\r\n                  <div className=\"small text-muted\">\r\n                    {formatDateToLocal(date).toLocaleDateString('en-US', { weekday: 'short' })}\r\n                  </div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {[...doctorRosterMap.entries()].map(([doctorId, doctorDates]) => {\r\n              const doctor = doctorData.find(d => d.userId === doctorId);\r\n              const doctorName = doctor ? `${doctor.firstName} ${doctor.lastName}` : 'Unknown Doctor';\r\n\r\n              return (\r\n                <tr key={doctorId}>\r\n                  <td>{doctorName}</td>\r\n                  {allDates.map(date => {\r\n                    const dateItem = doctorDates.find(d => d.dates === date);\r\n                    \r\n                    if (!dateItem) {\r\n                      return (\r\n                        <td key={date} className=\"text-center text-muted\">\r\n                          N/A\r\n                        </td>\r\n                      );\r\n                    }\r\n\r\n                    const isDisabled = isDateDisabled(date);\r\n                    const rosterValue = dateItem.rosterVale;\r\n\r\n                    return (\r\n                      <td key={date} className=\"text-center\">\r\n                        <div className=\"form-check form-check-inline\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            checked={rosterValue === \"YY\" || rosterValue === \"YN\"}\r\n                            onChange={() => handleCheckboxChange(doctorId, date, 'morning')}\r\n                            disabled={isDisabled}\r\n                          />\r\n                          <label \r\n                            className={`form-check-label ${isDisabled ? 'text-muted' : ''}`}\r\n                          >\r\n                            M\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            checked={rosterValue === \"YY\" || rosterValue === \"NY\"}\r\n                            onChange={() => handleCheckboxChange(doctorId, date, 'evening')}\r\n                            disabled={isDisabled}\r\n                          />\r\n                          <label \r\n                            className={`form-check-label ${isDisabled ? 'text-muted' : ''}`}\r\n                          >\r\n                            E\r\n                          </label>\r\n                        </div>\r\n                      </td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"body d-flex py-3\">\r\n      <div className=\"container-xxl\">\r\n        <div className=\"row align-items-center\">\r\n          <div className=\"border-0 mb-4\">\r\n            <div className=\"card-header py-3 bg-transparent d-flex align-items-center px-0 justify-content-between border-bottom flex-wrap\">\r\n              <h3 className=\"fw-bold mb-0\">Doctor Roster</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {popupMessage && (\r\n          <Popup\r\n            message={popupMessage.message}\r\n            type={popupMessage.type}\r\n            onClose={popupMessage.onClose}\r\n          />\r\n        )}\r\n        {loading && (\r\n          <LoadingScreen />\r\n        )}\r\n\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-sm-12\">\r\n            <div className=\"card shadow mb-3\">\r\n              <div className=\"card-body\">\r\n                <form onSubmit={handleSubmit}>\r\n                  <div className=\"row g-3\">\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label\">Department *</label>\r\n                      <select\r\n                        className=\"form-select\"\r\n                        value={department}\r\n                        onChange={(e) => setDepartment(parseInt(e.target.value))}\r\n                        required\r\n                      >\r\n                        <option value=\"\" disabled>Select</option>\r\n                        {departmentData.map((dept) => (\r\n                          <option key={dept.id} value={dept.id}>\r\n                            {dept.departmentName}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label\">Doctor (Optional)</label>\r\n                      <select\r\n                        className=\"form-select\"\r\n                        value={doctor}\r\n                        onChange={(e) => setDoctor(e.target.value)}\r\n                        disabled={!department}\r\n                      >\r\n                        <option value=\"\">All Doctors</option>\r\n                        {doctorData.map((doc) => (\r\n                          <option key={doc.userId} value={doc.userId}>\r\n                            {doc.firstName} {doc.lastName}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label\">From Date *</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        className=\"form-control\"\r\n                        value={fromDate}\r\n                        onChange={(e) => setFromDate(e.target.value)}\r\n                        required\r\n                      />\r\n                    </div>\r\n\r\n                    {rosterDoctorData && renderRosterTable()}\r\n                  </div>\r\n\r\n                  <div className=\"mt-4\">\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"btn btn-primary me-2\"\r\n                      disabled={loading || !rosterDoctorData}\r\n                    >\r\n                      {loading ? 'Processing...' : 'Save Roster'}\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-secondary\"\r\n                      onClick={handleReset}\r\n                      disabled={loading}\r\n                    >\r\n                      Reset\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorRoaster;"],"names":["DoctorRoaster","department","setDepartment","useState","doctor","setDoctor","fromDate","setFromDate","departmentData","setDepartmentData","doctorData","setDoctorData","loading","setLoading","rosterDoctorData","setRosterDoctorData","popup","setPopup","popupMessage","setPopupMessage","currentDate","setCurrentDate","Date","showPopup","message","type","arguments","length","undefined","onClose","useEffect","fetchDepartmentData","fetchDoctorData","prepareRosterData","async","data","getRequest","DEPARTMENT","status","Array","isArray","response","console","error","DOCTOR","queryParams","URLSearchParams","deptId","rosterDate","append","apiUrl","DOCTOR_ROSTER","toString","existingRosterResponse","generatedDates","generateDatesFromSelectedDate","startDate","today","setHours","dates","i","setDate","getDate","formattedDate","padStart","getMonth","getFullYear","push","doctorsToUse","selectedDoctor","find","doc","userId","parseInt","name","firstName","lastName","id","map","flatMap","doctorInfo","date","rosterVale","doctorId","mergedDates","existingDates","existingDatesMap","Map","forEach","key","set","genDate","get","existDate","some","md","rosterData","departmentId","handleCheckboxChange","session","formatDateToLocal","updatedDates","item","newRosterValue","prev","dateString","day","month","year","split","formatDisplayDate","toLocaleDateString","_jsx","className","children","_jsxs","Popup","LoadingScreen","onSubmit","e","preventDefault","endpoint","postRequest","value","onChange","target","required","disabled","dept","departmentName","renderRosterTable","doctorRosterMap","has","allDates","Set","sort","a","b","weekday","entries","_ref","doctorDates","d","doctorName","dateItem","isDisabled","rosterValue","checked","onClick","handleReset"],"sourceRoot":""}