{"version":3,"file":"static/js/709.f0247046.chunk.js","mappings":"iLAMA,MAgjBA,EAhjBsBA,KACpB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,KAC9BG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,KAClCK,EAAmBC,IAAwBN,EAAAA,EAAAA,UAAS,KACpDO,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAS,KAC9CS,EAAYC,IAAiBV,EAAAA,EAAAA,UAAS,KACtCW,EAASC,IAAcZ,EAAAA,EAAAA,WAAS,IAChCa,EAAkBC,IAAuBd,EAAAA,EAAAA,UAAS,OAClDe,EAAOC,IAAYhB,EAAAA,EAAAA,UAAS,KAC5BiB,EAAcC,IAAmBlB,EAAAA,EAAAA,UAAS,KAC1CmB,EAAaC,IAAkBpB,EAAAA,EAAAA,UAAS,IAAIqB,OAC5CC,EAAoBC,IAAyBvB,EAAAA,EAAAA,UAAS,MAG7DwB,aAAaC,QAAQ,QAFJ,mPAIjB,MAAMC,EAAY,SAACC,GACjBT,EAAgB,CACdS,UACAC,KAH4BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,OAI/BG,QAASA,KACPd,EAAgB,KAAK,GAG3B,GAEAe,EAAAA,EAAAA,YAAU,KACRC,GAAqB,GACpB,KAEHD,EAAAA,EAAAA,YAAU,KACJnC,GACFqC,GACF,GACC,CAACrC,KAEJmC,EAAAA,EAAAA,YAAU,KACJnC,GAAcK,GAChBiC,GACF,GACC,CAACtC,EAAYG,EAAQE,EAAUM,IAIjC,MAAMyB,EAAsBG,UACzBzB,GAAW,GACX,IACE,MAAM0B,QAAaC,EAAAA,EAAAA,IAAW,GAAGC,EAAAA,0BACjC,GAAoB,MAAhBF,EAAKG,QAAkBC,MAAMC,QAAQL,EAAKM,UAAW,CACvD,MAAMC,EAAsBP,EAAKM,SAASE,QACvCC,GAAqC,QAA5BA,EAAKC,qBAEjB1C,EAAqBgC,EAAKM,UAC1BpC,EAAkBqC,EACpB,MACEI,QAAQC,MAAM,kCAAmCZ,GACjDhC,EAAqB,IACrBE,EAAkB,GAEtB,CAAE,MAAO0C,GACPD,QAAQC,MAAM,kCAAmCA,EACnD,CAAC,QACCtC,GAAW,EACb,GAGEuB,EAAkBE,UACtBzB,GAAW,GACX,IACE,MAAM0B,QAAaC,EAAAA,EAAAA,IAAW,GAAGY,EAAAA,yBAA6BrD,KAC1C,MAAhBwC,EAAKG,QAAkBC,MAAMC,QAAQL,EAAKM,UAC5ClC,EAAc4B,EAAKM,WAEnBK,QAAQC,MAAM,kCAAmCZ,GACjD5B,EAAc,IAElB,CAAE,MAAOwC,GACPD,QAAQC,MAAM,8BAA+BA,EAC/C,CAAC,QACCtC,GAAW,EACb,GAwDIwB,EAAoBC,UACxB,GAAKvC,GAAeK,EAEpB,IACES,GAAW,GAEX,MAAMwC,EAAc,IAAIC,gBAAgB,CACtCC,OAAQxD,EACRyD,WAAYpD,IAGVF,GACFmD,EAAYI,OAAO,WAAYvD,GAGjC,MAAMwD,EAAS,GAAGC,EAAAA,wBAAoCN,EAAYO,aAC5DC,QAA+BrB,EAAAA,EAAAA,IAAWkB,GAE1CI,EAvE4BC,MACpC,IAAK3D,EAAU,MAAO,GAEtB,MAAM4D,EAAY,IAAI1C,KAAKlB,GACrB6D,EAAQ,IAAI3C,KAClB2C,EAAMC,SAAS,EAAG,EAAG,EAAG,GAExB,MAAMC,EAAQ,GAEd,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMhD,EAAc,IAAIE,KAAK0C,GAI7B,GAHA5C,EAAYiD,QAAQL,EAAUM,UAAYF,GAC1ChD,EAAY8C,SAAS,EAAG,EAAG,EAAG,GAE1B9C,EAAc6C,EAAO,CACvB,MAAMM,EAAgB,GAAGnD,EAAYkD,UAAUV,WAAWY,SAAS,EAAG,SAASpD,EAAYqD,WAAa,GAAGb,WAAWY,SAAS,EAAG,QAAQpD,EAAYsD,gBAEtJP,EAAMQ,KAAKJ,EACb,CACF,CAEA,IAAIK,EAAe,GAEnB,GAAI1E,EAAQ,CACV,MAAM2E,EAAiBnE,EAAWoE,MAAKC,GAAOA,EAAIC,SAAWC,SAAS/E,KAClE2E,IACFD,EAAe,CAAC,CACdM,KAAM,GAAGL,EAAeM,aAAaN,EAAeO,WACpDC,GAAIR,EAAeG,SAGzB,MACEJ,EAAelE,EAAW4E,KAAIP,IAAG,CAC/BG,KAAM,GAAGH,EAAII,aAAaJ,EAAIK,WAC9BC,GAAIN,EAAIC,WAgBZ,OAZuBJ,EAAaW,SAAQC,GAC1CrB,EAAMmB,KAAIG,IAAI,CACZtB,MAAOsB,EACPC,WAAY,KACZC,SAAUH,EAAWH,GACrBA,GAAI,KACJO,cAAc,EACdC,iBAAiB,EACjBC,iBAAiB,OAIA,EAqBI/B,GAEvB,IAAIgC,EAAc,GAClB,GAAIlC,EAAuBhB,UAAYgB,EAAuBhB,SAASsB,MAAO,CAC5E,MAAM6B,EAAgBnC,EAAuBhB,SAASsB,MAAMmB,KAAIG,IAAI,IAC/DA,EACHG,cAAc,EACdC,iBAAiB,EACjBC,iBAAiB,MAGbG,EAAmB,IAAIC,IAC7BF,EAAcG,SAAQV,IACpB,MAAMW,EAAM,GAAGX,EAAKE,YAAYF,EAAKtB,QACrC8B,EAAiBI,IAAID,EAAKX,EAAK,IAGjCM,EAAcjC,EAAewB,KAAIgB,IAC/B,MAAMF,EAAM,GAAGE,EAAQX,YAAYW,EAAQnC,QAG3C,OAFqB8B,EAAiBM,IAAIH,IAEnBE,CAAO,IAGhCN,EAAcG,SAAQK,IACpB,MAAMJ,EAAM,GAAGI,EAAUb,YAAYa,EAAUrC,QAC1C4B,EAAYU,MAAKC,GAAM,GAAGA,EAAGf,YAAYe,EAAGvC,UAAYiC,KAC3DL,EAAYpB,KAAK6B,EACnB,GAEJ,MACET,EAAcjC,EAGhB,MAAM6C,EAAa,CACjBC,aAAc3B,SAASlF,GACvBK,SAAUA,EACV+D,MAAO4B,GAGHc,EAAeC,KAAKC,MAAMD,KAAKE,UAAUL,IAC/CnF,EAAsBqF,GAEtB9F,EAAoB4F,EACtB,CAAE,MAAOxD,GACPD,QAAQC,MAAM,+BAAgCA,GAC9CxB,EAAU,8BAA+B,QAC3C,CAAC,QACCd,GAAW,EACb,GAGIoG,EAAuBA,CAACtB,EAAUF,EAAMyB,KAE5C,GADsBC,EAAkB1B,GACpBrE,EAAa,OAEjC,MAAMgG,EAAetG,EAAiBqD,MAAMmB,KAAI+B,IAC9C,GAAIA,EAAK1B,WAAaA,GAAY0B,EAAKlD,QAAUsB,EAAM,CACrD,IAAI6B,EACJ,OAAOD,EAAK3B,YACV,IAAK,KACH4B,EAA6B,YAAZJ,EAAwB,KAAO,KAChD,MACF,IAAK,KACHI,EAA6B,YAAZJ,EAAwB,KAAO,KAChD,MACF,IAAK,KACHI,EAA6B,YAAZJ,EAAwB,KAAO,KAChD,MACF,IAAK,KACHI,EAA6B,YAAZJ,EAAwB,KAAO,KAChD,MACF,QACEI,EAAiB,KAGrB,MAAMC,EAAiC,OAAlBhG,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoB4C,MAAMW,MAAK0C,GAClDA,EAAK7B,WAAaA,GAAY6B,EAAKrD,QAAUsB,IAG/C,GAAI8B,GAAgBF,EAAKzB,aAAc,CACrC,MAAM6B,EAAgBF,EAAa7B,WAE7BG,EAA8B,YAAZqB,EACtBO,EAAcC,OAAO,KAAOJ,EAAeI,OAAO,GAClDL,EAAKxB,gBAEDC,EAA8B,YAAZoB,EACtBO,EAAcC,OAAO,KAAOJ,EAAeI,OAAO,GAClDL,EAAKvB,gBAEP,MAAO,IACFuB,EACH3B,WAAY4B,EACZzB,kBACAC,kBAEJ,CAEA,MAAO,IAAKuB,EAAM3B,WAAY4B,EAChC,CACA,OAAOD,CAAI,IAGbtG,GAAoB4G,IAAI,IACnBA,EACHxD,MAAOiD,KACN,EAGCD,EAAqBS,IACzB,MAAOC,EAAKC,EAAOC,GAAQH,EAAWI,MAAM,KAC5C,OAAO,IAAI1G,KAAK,GAAGyG,KAAQD,KAASD,IAAM,EAGtCI,EAAqBL,IACzB,IAAKA,EAAY,MAAO,GACxB,MAAOC,EAAKC,EAAOC,GAAQH,EAAWI,MAAM,KAE5C,OADa,IAAI1G,KAAK,GAAGyG,KAAQD,KAASD,KAC9BK,mBAAmB,QAAS,CAAEL,IAAK,UAAWC,MAAO,QAASC,KAAM,WAAY,EA2CxFI,EAAcA,KAClBnI,EAAc,IACdG,EAAU,IACVE,EAAY,IACZU,EAAoB,MACpBS,EAAsB,KAAK,EAGvB4G,EAA2BC,GAC3BA,EAASzC,cAAgByC,EAASxC,gBAC7B,CAAEyC,gBAAiB,UAAWC,YAAa,WAE3CF,EAASzC,aACT,CAAE0C,gBAAiB,UAAWC,YAAa,WAE7C,CAAC,EAGJC,EAA2BH,GAC3BA,EAASzC,cAAgByC,EAASvC,gBAC7B,CAAEwC,gBAAiB,UAAWC,YAAa,WAE3CF,EAASzC,aACT,CAAE0C,gBAAiB,UAAWC,YAAa,WAE7C,CAAC,EAoHV,OACEE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBC,UACrCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iHAAgHC,UAC7HF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,eAAcC,SAAC,wBAIlCzH,IACCuH,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CACJjH,QAASV,EAAaU,QACtBC,KAAMX,EAAaW,KACnBI,QAASf,EAAae,UAGzBrB,IACC6H,EAAAA,EAAAA,KAACK,EAAAA,EAAa,KAGhBL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,MAAA,QAAMG,SAzMCzG,UAGnB,GAFA0G,EAAEC,iBAEGlJ,GAAeK,EAApB,CAKAS,GAAW,GAEX,IACE,MAAMqI,EAAW,GAAGvF,EAAAA,WAEdwF,EAAa,IACdrI,EACHqD,MAAOrD,EAAiBqD,MAAMmB,KAAI8D,IAAA,IAAC,aAAExD,EAAY,gBAAEC,EAAe,gBAAEC,KAAoBuD,GAAMD,EAAA,OAAKC,CAAI,KAGnGxG,QAAiByG,EAAAA,EAAAA,IAAYJ,EAAUC,GAErB,MAApBtG,EAASH,QACXf,EAAU,6BAA8B,WACxCwG,IACA9F,KAEAV,EAAU,wBAAwBkB,EAASjB,SAAW,kBAAmB,QAE7E,CAAE,MAAOuB,GACPD,QAAQC,MAAM,uBAAwBA,GACtCxB,EAAU,4CAA6C,QACzD,CAAC,QACCd,GAAW,EACb,CA1BA,MAFEc,EAAU,yCAA0C,QA4BtD,EAyKyCgH,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,UAASC,SAAA,EACtBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYC,SAAC,kBAC9BC,EAAAA,EAAAA,MAAA,UACEF,UAAU,cACVa,MAAOxJ,EACPyJ,SAAWR,GAAMhJ,EAAciF,SAAS+D,EAAES,OAAOF,QACjDG,UAAQ,EAAAf,SAAA,EAERF,EAAAA,EAAAA,KAAA,UAAQc,MAAM,GAAGI,UAAQ,EAAAhB,SAAC,WACzBnI,EAAe8E,KAAKtC,IACnByF,EAAAA,EAAAA,KAAA,UAAsBc,MAAOvG,EAAKqC,GAAGsD,SAClC3F,EAAK4G,gBADK5G,EAAKqC,aAOxBuD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYC,SAAC,uBAC9BC,EAAAA,EAAAA,MAAA,UACEF,UAAU,cACVa,MAAOrJ,EACPsJ,SAAWR,GAAM7I,EAAU6I,EAAES,OAAOF,OACpCI,UAAW5J,EAAW4I,SAAA,EAEtBF,EAAAA,EAAAA,KAAA,UAAQc,MAAM,GAAEZ,SAAC,gBAChBjI,EAAW4E,KAAKP,IACf6D,EAAAA,EAAAA,MAAA,UAAyBW,MAAOxE,EAAIC,OAAO2D,SAAA,CACxC5D,EAAII,UAAU,IAAEJ,EAAIK,WADVL,EAAIC,iBAOvB4D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYC,SAAC,iBAC9BF,EAAAA,EAAAA,KAAA,SACE5G,KAAK,OACL6G,UAAU,eACVa,MAAOnJ,EACPoJ,SAAWR,GAAM3I,EAAY2I,EAAES,OAAOF,OACtCG,UAAQ,OAIX5I,GAzLO+I,MACxB,IAAK/I,IAAqBA,EAAiBqD,OAA2C,IAAlCrD,EAAiBqD,MAAMpC,OAAc,OAAO,KAEhG,MAAM+H,EAAkB,IAAI5D,IAC5BpF,EAAiBqD,MAAMgC,SAAQkB,IACxByC,EAAgBC,IAAI1C,EAAK1B,WAC5BmE,EAAgBzD,IAAIgB,EAAK1B,SAAU,IAErCmE,EAAgBvD,IAAIc,EAAK1B,UAAUhB,KAAK0C,EAAK,IAG/C,MAAM2C,EAAW,IAAI,IAAIC,IAAInJ,EAAiBqD,MAAMmB,KAAI+B,GAAQA,EAAKlD,UAAS+F,MAAK,CAACC,EAAGC,IACvEjD,EAAkBgD,GAClBhD,EAAkBiD,KAIlC,OACExB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,SAAOF,UAAU,uBAAsBC,SAAA,EACrCF,EAAAA,EAAAA,KAAA,SAAAE,UACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,WACHqB,EAAS1E,KAAIG,IACZmD,EAAAA,EAAAA,MAAA,MAAeF,UAAU,cAAaC,SAAA,CACnCV,EAAkBxC,IACnBgD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,SAC9BxB,EAAkB1B,GAAMyC,mBAAmB,QAAS,CAAEmC,QAAS,cAH3D5E,WASfgD,EAAAA,EAAAA,KAAA,SAAAE,SACG,IAAImB,EAAgBQ,WAAWhF,KAAIiF,IAA8B,IAA5B5E,EAAU6E,GAAYD,EAC1D,MAAMrK,EAASQ,EAAWoE,MAAK2F,GAAKA,EAAEzF,SAAWW,IAC3C+E,EAAaxK,EAAS,GAAGA,EAAOiF,aAAajF,EAAOkF,WAAa,iBAEvE,OACEwD,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAK+B,IACJV,EAAS1E,KAAIG,IACZ,MAAM4C,EAAWmC,EAAY1F,MAAK2F,GAAKA,EAAEtG,QAAUsB,IAEnD,IAAK4C,EACH,OACEI,EAAAA,EAAAA,KAAA,MAAeC,UAAU,yBAAwBC,SAAC,OAAzClD,GAMb,MAAMkF,EAvHHxD,EAuH+B1B,GAtH9BrE,EAuHJ,MAAMwJ,EAAcvC,EAAS3C,WAE7B,OACEkD,EAAAA,EAAAA,MAAA,MAAeF,UAAU,cAAaC,SAAA,EACpCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,+BAA8BC,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,SACE5G,KAAK,WACL6G,UAAU,mBACVmC,QAAyB,OAAhBD,GAAwC,OAAhBA,EACjCpB,SAAUA,IAAMvC,EAAqBtB,EAAUF,EAAM,WACrDkE,SAAUgB,EACVG,MAAO1C,EAAwBC,MAEjCI,EAAAA,EAAAA,KAAA,SACEC,UAAW,qBAAoBiC,EAAa,aAAe,IAAKhC,SACjE,UAIHC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,+BAA8BC,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,SACE5G,KAAK,WACL6G,UAAU,mBACVmC,QAAyB,OAAhBD,GAAwC,OAAhBA,EACjCpB,SAAUA,IAAMvC,EAAqBtB,EAAUF,EAAM,WACrDkE,SAAUgB,EACVG,MAAOtC,EAAwBH,MAEjCI,EAAAA,EAAAA,KAAA,SACEC,UAAW,qBAAoBiC,EAAa,aAAe,IAAKhC,SACjE,WA3BIlD,EA+BJ,MAhDFE,EAmDJ,UAKbiD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,OAAKqC,MAAO,CAACC,MAAO,OAAQC,OAAQ,OAAQ1C,gBAAiB,UAAW2C,YAAa,WACrFxC,EAAAA,EAAAA,KAAA,QAAAE,SAAM,2BAERC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,OAAKqC,MAAO,CAACC,MAAO,OAAQC,OAAQ,OAAQ1C,gBAAiB,UAAW2C,YAAa,WACrFxC,EAAAA,EAAAA,KAAA,QAAAE,SAAM,+BAERC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BC,SAAA,EACxCF,EAAAA,EAAAA,KAAA,OAAKqC,MAAO,CAACC,MAAO,OAAQC,OAAQ,OAAQ1C,gBAAiB,UAAW2C,YAAa,WACrFxC,EAAAA,EAAAA,KAAA,QAAAE,SAAM,qBAGN,EA4E6BkB,OAGvBjB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,UACE5G,KAAK,SACL6G,UAAU,uBACViB,SAAU/I,IAAYE,EAAiB6H,SAEtC/H,EAAU,gBAAkB,iBAE/B6H,EAAAA,EAAAA,KAAA,UACE5G,KAAK,SACL6G,UAAU,oBACVwC,QAAS/C,EACTwB,SAAU/I,EAAQ+H,SACnB,4BAUX,C","sources":["Views/Admin/Apointment/DoctorRoaster/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { DEPARTMENT, DOCTOR, DOCTOR_ROSTER, APPOINTMENT } from \"../../../../config/apiConfig\";\r\nimport { getRequest, putRequest, postRequest } from \"../../../../service/apiService\";\r\nimport LoadingScreen from \"../../../../Components/Loading\";\r\nimport Popup from \"../../../../Components/popup\";\r\n\r\nconst DoctorRoaster = () => {\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [doctor, setDoctor] = useState(\"\");\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [rowDepartmentData, setRowDepartmentData] = useState([]);\r\n  const [departmentData, setDepartmentData] = useState([]);\r\n  const [doctorData, setDoctorData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [rosterDoctorData, setRosterDoctorData] = useState(null);\r\n  const [popup, setPopup] = useState(\"\");\r\n  const [popupMessage, setPopupMessage] = useState(\"\");\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [originalRosterData, setOriginalRosterData] = useState(null); \r\n  const jwtToken = \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhYmNAZ21haWwuY29tIiwiaG9zcGl0YWxJZCI6MSwiZW1wbG95ZWVJZCI6MSwiZXhwIjoxNzQ0Mjc5MDc0LCJ1c2VySWQiOjQsImlhdCI6MTc0MzY3NDI3NH0._lLEDlJG85GljjCscLe7l7YHyNAFg0h25JSseZvfvTMA1-7BDwGX7vPRzemg-yHyYm8jAUHREJ_leEst1x20lA\";\r\n\r\n  localStorage.setItem(\"token\", jwtToken);\r\n\r\n  const showPopup = (message, type = \"info\") => {\r\n    setPopupMessage({\r\n      message,\r\n      type,\r\n      onClose: () => {\r\n        setPopupMessage(null);\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDepartmentData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (department) {\r\n      fetchDoctorData();\r\n    }\r\n  }, [department]);\r\n\r\n  useEffect(() => {\r\n    if (department && fromDate) {\r\n      prepareRosterData();\r\n    }\r\n  }, [department, doctor, fromDate, doctorData]);\r\n\r\n\r\n\r\n   const fetchDepartmentData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const data = await getRequest(`${DEPARTMENT}/getAllDepartments/1`);\r\n        if (data.status === 200 && Array.isArray(data.response)) {\r\n          const filteredDepartments = data.response.filter(\r\n            (dept) => dept.departmentTypeName === \"OPD\"\r\n          );\r\n          setRowDepartmentData(data.response);\r\n          setDepartmentData(filteredDepartments);\r\n        } else {\r\n          console.error(\"Unexpected API response format:\", data);\r\n          setRowDepartmentData([]);\r\n          setDepartmentData([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching Department data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n  const fetchDoctorData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getRequest(`${DOCTOR}/doctorBySpeciality/${department}`);\r\n      if (data.status === 200 && Array.isArray(data.response)) {\r\n        setDoctorData(data.response);\r\n      } else {\r\n        console.error(\"Unexpected API response format:\", data);\r\n        setDoctorData([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching Doctor data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateDatesFromSelectedDate = () => {\r\n    if (!fromDate) return [];\r\n  \r\n    const startDate = new Date(fromDate);\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0); \r\n  \r\n    const dates = [];\r\n  \r\n    for (let i = 0; i < 7; i++) {\r\n      const currentDate = new Date(startDate);\r\n      currentDate.setDate(startDate.getDate() + i);\r\n      currentDate.setHours(0, 0, 0, 0); \r\n  \r\n      if (currentDate > today) {\r\n        const formattedDate = `${currentDate.getDate().toString().padStart(2, '0')}/${(currentDate.getMonth() + 1).toString().padStart(2, '0')}/${currentDate.getFullYear()}`;\r\n        \r\n        dates.push(formattedDate);\r\n      }\r\n    }\r\n  \r\n    let doctorsToUse = [];\r\n  \r\n    if (doctor) {\r\n      const selectedDoctor = doctorData.find(doc => doc.userId === parseInt(doctor));\r\n      if (selectedDoctor) {\r\n        doctorsToUse = [{\r\n          name: `${selectedDoctor.firstName} ${selectedDoctor.lastName}`,\r\n          id: selectedDoctor.userId\r\n        }];\r\n      }\r\n    } else {\r\n      doctorsToUse = doctorData.map(doc => ({\r\n        name: `${doc.firstName} ${doc.lastName}`,\r\n        id: doc.userId\r\n      }));\r\n    }\r\n  \r\n    const generatedDates = doctorsToUse.flatMap(doctorInfo => \r\n      dates.map(date => ({\r\n        dates: date,\r\n        rosterVale: \"YY\", \r\n        doctorId: doctorInfo.id,\r\n        id: null,\r\n        fromDatabase: false,\r\n        morningModified: false,\r\n        eveningModified: false\r\n      }))\r\n    );\r\n  \r\n    return generatedDates;\r\n  };\r\n\r\n  const prepareRosterData = async () => {\r\n    if (!department || !fromDate) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const queryParams = new URLSearchParams({\r\n        deptId: department,\r\n        rosterDate: fromDate,\r\n      });\r\n\r\n      if (doctor) {\r\n        queryParams.append(\"doctorId\", doctor);\r\n      }\r\n\r\n      const apiUrl = `${DOCTOR_ROSTER}/rosterfindWithDays?${queryParams.toString()}`;\r\n      const existingRosterResponse = await getRequest(apiUrl);\r\n\r\n      const generatedDates = generateDatesFromSelectedDate();\r\n\r\n      let mergedDates = [];\r\n      if (existingRosterResponse.response && existingRosterResponse.response.dates) {\r\n        const existingDates = existingRosterResponse.response.dates.map(date => ({\r\n          ...date,\r\n          fromDatabase: true,\r\n          morningModified: false,\r\n          eveningModified: false\r\n        }));\r\n\r\n        const existingDatesMap = new Map();\r\n        existingDates.forEach(date => {\r\n          const key = `${date.doctorId}-${date.dates}`;\r\n          existingDatesMap.set(key, date);\r\n        });\r\n\r\n        mergedDates = generatedDates.map(genDate => {\r\n          const key = `${genDate.doctorId}-${genDate.dates}`;\r\n          const existingDate = existingDatesMap.get(key);\r\n          \r\n          return existingDate || genDate;\r\n        });\r\n\r\n        existingDates.forEach(existDate => {\r\n          const key = `${existDate.doctorId}-${existDate.dates}`;\r\n          if (!mergedDates.some(md => `${md.doctorId}-${md.dates}` === key)) {\r\n            mergedDates.push(existDate);\r\n          }\r\n        });\r\n      } else {\r\n        mergedDates = generatedDates;\r\n      }\r\n\r\n      const rosterData = {\r\n        departmentId: parseInt(department),\r\n        fromDate: fromDate,\r\n        dates: mergedDates\r\n      };\r\n\r\n      const originalData = JSON.parse(JSON.stringify(rosterData));\r\n      setOriginalRosterData(originalData);\r\n      \r\n      setRosterDoctorData(rosterData);\r\n    } catch (error) {\r\n      console.error(\"Error preparing roster data:\", error);\r\n      showPopup(\"Error preparing roster data\", \"error\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCheckboxChange = (doctorId, date, session) => {\r\n    const formattedDate = formatDateToLocal(date);\r\n    if (formattedDate < currentDate) return;\r\n\r\n    const updatedDates = rosterDoctorData.dates.map(item => {\r\n      if (item.doctorId === doctorId && item.dates === date) {\r\n        let newRosterValue;\r\n        switch(item.rosterVale) {\r\n          case \"YY\":\r\n            newRosterValue = session === 'morning' ? \"NY\" : \"YN\";\r\n            break;\r\n          case \"YN\":\r\n            newRosterValue = session === 'morning' ? \"NN\" : \"YY\";\r\n            break;\r\n          case \"NY\":\r\n            newRosterValue = session === 'morning' ? \"YY\" : \"NN\";\r\n            break;\r\n          case \"NN\":\r\n            newRosterValue = session === 'morning' ? \"YN\" : \"NY\";\r\n            break;\r\n          default:\r\n            newRosterValue = \"YY\";\r\n        }\r\n\r\n        const originalItem = originalRosterData?.dates.find(orig => \r\n          orig.doctorId === doctorId && orig.dates === date\r\n        );\r\n        \r\n        if (originalItem && item.fromDatabase) {\r\n          const originalValue = originalItem.rosterVale;\r\n          \r\n          const morningModified = session === 'morning' ? \r\n            originalValue.charAt(0) !== newRosterValue.charAt(0) : \r\n            item.morningModified;\r\n            \r\n          const eveningModified = session === 'evening' ? \r\n            originalValue.charAt(1) !== newRosterValue.charAt(1) : \r\n            item.eveningModified;\r\n          \r\n          return { \r\n            ...item, \r\n            rosterVale: newRosterValue,\r\n            morningModified,\r\n            eveningModified\r\n          };\r\n        }\r\n        \r\n        return { ...item, rosterVale: newRosterValue };\r\n      }\r\n      return item;\r\n    });\r\n\r\n    setRosterDoctorData(prev => ({\r\n      ...prev,\r\n      dates: updatedDates\r\n    }));\r\n  };\r\n\r\n  const formatDateToLocal = (dateString) => {\r\n    const [day, month, year] = dateString.split('/');\r\n    return new Date(`${year}-${month}-${day}`);\r\n  };\r\n\r\n  const formatDisplayDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const [day, month, year] = dateString.split('/');\r\n    const date = new Date(`${year}-${month}-${day}`);\r\n    return date.toLocaleDateString('en-US', { day: '2-digit', month: 'short', year: 'numeric' });\r\n  };\r\n\r\n  const isDateDisabled = (dateString) => {\r\n    const rosterDate = formatDateToLocal(dateString);\r\n    return rosterDate < currentDate;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!department || !fromDate) {\r\n      showPopup(\"Please select Department and From Date\", \"error\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const endpoint = `${DOCTOR_ROSTER}/roster`;\r\n      \r\n      const dataToSend = {\r\n        ...rosterDoctorData,\r\n        dates: rosterDoctorData.dates.map(({ fromDatabase, morningModified, eveningModified, ...rest }) => rest)\r\n      };\r\n      \r\n      const response = await postRequest(endpoint, dataToSend);\r\n\r\n      if (response.status === 200) {\r\n        showPopup(\"Roster saved successfully!\", \"success\");\r\n        handleReset();\r\n        prepareRosterData(); \r\n      } else {\r\n        showPopup(`Error saving roster: ${response.message || \"Unknown error\"}`, \"error\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving roster:\", error);\r\n      showPopup(\"An error occurred while saving the roster\", \"error\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setDepartment(\"\");\r\n    setDoctor(\"\");\r\n    setFromDate(\"\");\r\n    setRosterDoctorData(null);\r\n    setOriginalRosterData(null);\r\n  };\r\n\r\n  const getMorningCheckboxStyle = (dateItem) => {\r\n    if (dateItem.fromDatabase && dateItem.morningModified) {\r\n      return { backgroundColor: \"#ffd24d\", borderColor: \"#ffd24d\" };\r\n    } \r\n    else if (dateItem.fromDatabase) {\r\n      return { backgroundColor: \"#55bf70\", borderColor: \"#55bf70\" }; \r\n    }\r\n    return {};\r\n  };\r\n  \r\n  const getEveningCheckboxStyle = (dateItem) => {\r\n    if (dateItem.fromDatabase && dateItem.eveningModified) {\r\n      return { backgroundColor: \"#ffd24d\", borderColor: \"#ffd24d\" }; \r\n    } \r\n    else if (dateItem.fromDatabase) {\r\n      return { backgroundColor: \"#55bf70\", borderColor: \"#55bf70\" }; \r\n    }\r\n    return {};\r\n  };\r\n\r\n  const renderRosterTable = () => {\r\n    if (!rosterDoctorData || !rosterDoctorData.dates || rosterDoctorData.dates.length === 0) return null;\r\n\r\n    const doctorRosterMap = new Map();\r\n    rosterDoctorData.dates.forEach(item => {\r\n      if (!doctorRosterMap.has(item.doctorId)) {\r\n        doctorRosterMap.set(item.doctorId, []);\r\n      }\r\n      doctorRosterMap.get(item.doctorId).push(item);\r\n    });\r\n\r\n    const allDates = [...new Set(rosterDoctorData.dates.map(item => item.dates))].sort((a, b) => {\r\n      const dateA = formatDateToLocal(a);\r\n      const dateB = formatDateToLocal(b);\r\n      return dateA - dateB;\r\n    });\r\n\r\n    return (\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Doctor</th>\r\n              {allDates.map(date => (\r\n                <th key={date} className=\"text-center\">\r\n                  {formatDisplayDate(date)}\r\n                  <div className=\"small text-muted\">\r\n                    {formatDateToLocal(date).toLocaleDateString('en-US', { weekday: 'short' })}\r\n                  </div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {[...doctorRosterMap.entries()].map(([doctorId, doctorDates]) => {\r\n              const doctor = doctorData.find(d => d.userId === doctorId);\r\n              const doctorName = doctor ? `${doctor.firstName} ${doctor.lastName}` : 'Unknown Doctor';\r\n\r\n              return (\r\n                <tr key={doctorId}>\r\n                  <td>{doctorName}</td>\r\n                  {allDates.map(date => {\r\n                    const dateItem = doctorDates.find(d => d.dates === date);\r\n                    \r\n                    if (!dateItem) {\r\n                      return (\r\n                        <td key={date} className=\"text-center text-muted\">\r\n                          N/A\r\n                        </td>\r\n                      );\r\n                    }\r\n\r\n                    const isDisabled = isDateDisabled(date);\r\n                    const rosterValue = dateItem.rosterVale;\r\n\r\n                    return (\r\n                      <td key={date} className=\"text-center\">\r\n                        <div className=\"form-check form-check-inline\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            checked={rosterValue === \"YY\" || rosterValue === \"YN\"}\r\n                            onChange={() => handleCheckboxChange(doctorId, date, 'morning')}\r\n                            disabled={isDisabled}\r\n                            style={getMorningCheckboxStyle(dateItem)}\r\n                          />\r\n                          <label\r\n                            className={`form-check-label ${isDisabled ? 'text-muted' : ''}`}\r\n                          >\r\n                            M\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            checked={rosterValue === \"YY\" || rosterValue === \"NY\"}\r\n                            onChange={() => handleCheckboxChange(doctorId, date, 'evening')}\r\n                            disabled={isDisabled}\r\n                            style={getEveningCheckboxStyle(dateItem)}\r\n                          />\r\n                          <label\r\n                            className={`form-check-label ${isDisabled ? 'text-muted' : ''}`}\r\n                          >\r\n                            E\r\n                          </label>\r\n                        </div>\r\n                      </td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"mt-2\">\r\n          <div className=\"d-flex align-items-center mb-2\">\r\n            <div style={{width: '20px', height: '20px', backgroundColor: '#55bf70', marginRight: '10px'}}></div>\r\n            <span>Data from database</span>\r\n          </div>\r\n          <div className=\"d-flex align-items-center mb-2\">\r\n            <div style={{width: '20px', height: '20px', backgroundColor: '#ffd24d', marginRight: '10px'}}></div>\r\n            <span>Modified database data</span>\r\n          </div>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div style={{width: '20px', height: '20px', backgroundColor: '#0d6efd', marginRight: '10px'}}></div>\r\n            <span>New data</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"body d-flex py-3\">\r\n      <div className=\"container-xxl\">\r\n        <div className=\"row align-items-center\">\r\n          <div className=\"border-0 mb-4\">\r\n            <div className=\"card-header py-3 bg-transparent d-flex align-items-center px-0 justify-content-between border-bottom flex-wrap\">\r\n              <h3 className=\"fw-bold mb-0\">Doctor Roster</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {popupMessage && (\r\n          <Popup\r\n            message={popupMessage.message}\r\n            type={popupMessage.type}\r\n            onClose={popupMessage.onClose}\r\n          />\r\n        )}\r\n        {loading && (\r\n          <LoadingScreen />\r\n        )}\r\n\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-sm-12\">\r\n            <div className=\"card shadow mb-3\">\r\n              <div className=\"card-body\">\r\n                <form onSubmit={handleSubmit}>\r\n                  <div className=\"row g-3\">\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label\">Department *</label>\r\n                      <select\r\n                        className=\"form-select\"\r\n                        value={department}\r\n                        onChange={(e) => setDepartment(parseInt(e.target.value))}\r\n                        required\r\n                      >\r\n                        <option value=\"\" disabled>Select</option>\r\n                        {departmentData.map((dept) => (\r\n                          <option key={dept.id} value={dept.id}>\r\n                            {dept.departmentName}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label\">Doctor (Optional)</label>\r\n                      <select\r\n                        className=\"form-select\"\r\n                        value={doctor}\r\n                        onChange={(e) => setDoctor(e.target.value)}\r\n                        disabled={!department}\r\n                      >\r\n                        <option value=\"\">All Doctors</option>\r\n                        {doctorData.map((doc) => (\r\n                          <option key={doc.userId} value={doc.userId}>\r\n                            {doc.firstName} {doc.lastName}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label\">From Date *</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        className=\"form-control\"\r\n                        value={fromDate}\r\n                        onChange={(e) => setFromDate(e.target.value)}\r\n                        required\r\n                      />\r\n                    </div>\r\n\r\n                    {rosterDoctorData && renderRosterTable()}\r\n                  </div>\r\n\r\n                  <div className=\"mt-4\">\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"btn btn-primary me-2\"\r\n                      disabled={loading || !rosterDoctorData}\r\n                    >\r\n                      {loading ? 'Processing...' : 'Save Roster'}\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-secondary\"\r\n                      onClick={handleReset}\r\n                      disabled={loading}\r\n                    >\r\n                      Reset\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorRoaster;"],"names":["DoctorRoaster","department","setDepartment","useState","doctor","setDoctor","fromDate","setFromDate","rowDepartmentData","setRowDepartmentData","departmentData","setDepartmentData","doctorData","setDoctorData","loading","setLoading","rosterDoctorData","setRosterDoctorData","popup","setPopup","popupMessage","setPopupMessage","currentDate","setCurrentDate","Date","originalRosterData","setOriginalRosterData","localStorage","setItem","showPopup","message","type","arguments","length","undefined","onClose","useEffect","fetchDepartmentData","fetchDoctorData","prepareRosterData","async","data","getRequest","DEPARTMENT","status","Array","isArray","response","filteredDepartments","filter","dept","departmentTypeName","console","error","DOCTOR","queryParams","URLSearchParams","deptId","rosterDate","append","apiUrl","DOCTOR_ROSTER","toString","existingRosterResponse","generatedDates","generateDatesFromSelectedDate","startDate","today","setHours","dates","i","setDate","getDate","formattedDate","padStart","getMonth","getFullYear","push","doctorsToUse","selectedDoctor","find","doc","userId","parseInt","name","firstName","lastName","id","map","flatMap","doctorInfo","date","rosterVale","doctorId","fromDatabase","morningModified","eveningModified","mergedDates","existingDates","existingDatesMap","Map","forEach","key","set","genDate","get","existDate","some","md","rosterData","departmentId","originalData","JSON","parse","stringify","handleCheckboxChange","session","formatDateToLocal","updatedDates","item","newRosterValue","originalItem","orig","originalValue","charAt","prev","dateString","day","month","year","split","formatDisplayDate","toLocaleDateString","handleReset","getMorningCheckboxStyle","dateItem","backgroundColor","borderColor","getEveningCheckboxStyle","_jsx","className","children","_jsxs","Popup","LoadingScreen","onSubmit","e","preventDefault","endpoint","dataToSend","_ref","rest","postRequest","value","onChange","target","required","disabled","departmentName","renderRosterTable","doctorRosterMap","has","allDates","Set","sort","a","b","weekday","entries","_ref2","doctorDates","d","doctorName","isDisabled","rosterValue","checked","style","width","height","marginRight","onClick"],"sourceRoot":""}