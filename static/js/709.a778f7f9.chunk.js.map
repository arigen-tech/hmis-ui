{"version":3,"file":"static/js/709.a778f7f9.chunk.js","mappings":"iLAMA,MAkhBA,EAlhBsBA,KACpB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,KAC9BG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,KAClCK,EAAgBC,IAAqBN,EAAAA,EAAAA,UAAS,KAC9CO,EAAYC,IAAiBR,EAAAA,EAAAA,UAAS,KACtCS,EAASC,IAAcV,EAAAA,EAAAA,WAAS,IAChCW,EAAkBC,IAAuBZ,EAAAA,EAAAA,UAAS,OAClDa,EAAOC,IAAYd,EAAAA,EAAAA,UAAS,KAC5Be,EAAcC,IAAmBhB,EAAAA,EAAAA,UAAS,KAC1CiB,EAAaC,IAAkBlB,EAAAA,EAAAA,UAAS,IAAImB,OAC5CC,EAAoBC,IAAyBrB,EAAAA,EAAAA,UAAS,MAG7DsB,aAAaC,QAAQ,QAFJ,mPAIjB,MAAMC,EAAY,SAACC,GACjBT,EAAgB,CACdS,UACAC,KAH4BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,OAI/BG,QAASA,KACPd,EAAgB,KAAK,GAG3B,GAEAe,EAAAA,EAAAA,YAAU,KACRC,GAAqB,GACpB,KAEHD,EAAAA,EAAAA,YAAU,KACJjC,GACFmC,GACF,GACC,CAACnC,KAEJiC,EAAAA,EAAAA,YAAU,KACJjC,GAAcK,GAChB+B,GACF,GACC,CAACpC,EAAYG,EAAQE,EAAUI,IAElC,MAAMyB,EAAsBG,UAC1BzB,GAAW,GACX,IACE,MAAM0B,QAAaC,EAAAA,EAAAA,IAAW,GAAGC,EAAAA,0BACb,MAAhBF,EAAKG,QAAkBC,MAAMC,QAAQL,EAAKM,UAC5CpC,EAAkB8B,EAAKM,WAEvBC,QAAQC,MAAM,kCAAmCR,GACjD9B,EAAkB,IAEtB,CAAE,MAAOsC,GACPD,QAAQC,MAAM,kCAAmCA,EACnD,CAAC,QACClC,GAAW,EACb,GAGIuB,EAAkBE,UACtBzB,GAAW,GACX,IACE,MAAM0B,QAAaC,EAAAA,EAAAA,IAAW,GAAGQ,EAAAA,yBAA6B/C,KAC1C,MAAhBsC,EAAKG,QAAkBC,MAAMC,QAAQL,EAAKM,UAC5ClC,EAAc4B,EAAKM,WAEnBC,QAAQC,MAAM,kCAAmCR,GACjD5B,EAAc,IAElB,CAAE,MAAOoC,GACPD,QAAQC,MAAM,8BAA+BA,EAC/C,CAAC,QACClC,GAAW,EACb,GAsDIwB,EAAoBC,UACxB,GAAKrC,GAAeK,EAEpB,IACEO,GAAW,GAEX,MAAMoC,EAAc,IAAIC,gBAAgB,CACtCC,OAAQlD,EACRmD,WAAY9C,IAGVF,GACF6C,EAAYI,OAAO,WAAYjD,GAGjC,MAAMkD,EAAS,GAAGC,EAAAA,wBAAoCN,EAAYO,aAC5DC,QAA+BjB,EAAAA,EAAAA,IAAWc,GAE1CI,EArE4BC,MACpC,IAAKrD,EAAU,MAAO,GAEtB,MAAMsD,EAAY,IAAItC,KAAKhB,GACrBuD,EAAQ,IAAIvC,KAClBuC,EAAMC,SAAS,EAAG,EAAG,EAAG,GAExB,MAAMC,EAAQ,GAEd,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAM5C,EAAc,IAAIE,KAAKsC,GAI7B,GAHAxC,EAAY6C,QAAQL,EAAUM,UAAYF,GAC1C5C,EAAY0C,SAAS,EAAG,EAAG,EAAG,GAE1B1C,EAAcyC,EAAO,CACvB,MAAMM,EAAgB,GAAG/C,EAAY8C,UAAUV,WAAWY,SAAS,EAAG,SAAShD,EAAYiD,WAAa,GAAGb,WAAWY,SAAS,EAAG,QAAQhD,EAAYkD,gBAEtJP,EAAMQ,KAAKJ,EACb,CACF,CAEA,IAAIK,EAAe,GAEnB,GAAIpE,EAAQ,CACV,MAAMqE,EAAiB/D,EAAWgE,MAAKC,GAAOA,EAAIC,SAAWC,SAASzE,KAClEqE,IACFD,EAAe,CAAC,CACdM,KAAM,GAAGL,EAAeM,aAAaN,EAAeO,WACpDC,GAAIR,EAAeG,SAGzB,MACEJ,EAAe9D,EAAWwE,KAAIP,IAAG,CAC/BG,KAAM,GAAGH,EAAII,aAAaJ,EAAIK,WAC9BC,GAAIN,EAAIC,WAcZ,OAVuBJ,EAAaW,SAAQC,GAC1CrB,EAAMmB,KAAIG,IAAI,CACZtB,MAAOsB,EACPC,WAAY,KACZC,SAAUH,EAAWH,GACrBA,GAAI,KACJO,cAAc,OAIG,EAqBI7B,GAEvB,IAAI8B,EAAc,GAClB,GAAIhC,EAAuBZ,UAAYY,EAAuBZ,SAASkB,MAAO,CAC5E,MAAM2B,EAAgBjC,EAAuBZ,SAASkB,MAAMmB,KAAIG,IAAI,IAC/DA,EACHG,cAAc,EACdG,UAAU,MAGNC,EAAmB,IAAIC,IAC7BH,EAAcI,SAAQT,IACpB,MAAMU,EAAM,GAAGV,EAAKE,YAAYF,EAAKtB,QACrC6B,EAAiBI,IAAID,EAAKV,EAAK,IAGjCI,EAAc/B,EAAewB,KAAIe,IAC/B,MAAMF,EAAM,GAAGE,EAAQV,YAAYU,EAAQlC,QAG3C,OAFqB6B,EAAiBM,IAAIH,IAEnBE,CAAO,IAGhCP,EAAcI,SAAQK,IACpB,MAAMJ,EAAM,GAAGI,EAAUZ,YAAYY,EAAUpC,QAC1C0B,EAAYW,MAAKC,GAAM,GAAGA,EAAGd,YAAYc,EAAGtC,UAAYgC,KAC3DN,EAAYlB,KAAK4B,EACnB,GAEJ,MACEV,EAAc/B,EAGhB,MAAM4C,EAAa,CACjBC,aAAc1B,SAAS5E,GACvBK,SAAUA,EACVyD,MAAO0B,GAGHe,EAAeC,KAAKC,MAAMD,KAAKE,UAAUL,IAC/C9E,EAAsBgF,GAEtBzF,EAAoBuF,EACtB,CAAE,MAAOvD,GACPD,QAAQC,MAAM,+BAAgCA,GAC9CpB,EAAU,8BAA+B,QAC3C,CAAC,QACCd,GAAW,EACb,GAGI+F,EAAuBA,CAACrB,EAAUF,EAAMwB,KAE5C,GADsBC,EAAkBzB,GACpBjE,EAAa,OAEjC,MAAM2F,EAAejG,EAAiBiD,MAAMmB,KAAI8B,IAC9C,GAAIA,EAAKzB,WAAaA,GAAYyB,EAAKjD,QAAUsB,EAAM,CACrD,IAAI4B,EACJ,OAAOD,EAAK1B,YACV,IAAK,KACH2B,EAA6B,YAAZJ,EAAwB,KAAO,KAChD,MACF,IAAK,KACHI,EAA6B,YAAZJ,EAAwB,KAAO,KAChD,MACF,IAAK,KACHI,EAA6B,YAAZJ,EAAwB,KAAO,KAChD,MACF,IAAK,KACHI,EAA6B,YAAZJ,EAAwB,KAAO,KAChD,MACF,QACEI,EAAiB,KAGrB,MAAMC,EAAiC,OAAlB3F,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBwC,MAAMW,MAAKyC,GAClDA,EAAK5B,WAAaA,GAAY4B,EAAKpD,QAAUsB,IAGzCM,IAAWuB,GAAeA,EAAa5B,aAAe2B,EAE5D,MAAO,IACFD,EACH1B,WAAY2B,EACZtB,SAAUqB,EAAKxB,cAAgBG,EAEnC,CACA,OAAOqB,CAAI,IAGbjG,GAAoBqG,IAAI,IACnBA,EACHrD,MAAOgD,KACN,EAGCD,EAAqBO,IACzB,MAAOC,EAAKC,EAAOC,GAAQH,EAAWI,MAAM,KAC5C,OAAO,IAAInG,KAAK,GAAGkG,KAAQD,KAASD,IAAM,EAGtCI,EAAqBL,IACzB,IAAKA,EAAY,MAAO,GACxB,MAAOC,EAAKC,EAAOC,GAAQH,EAAWI,MAAM,KAE5C,OADa,IAAInG,KAAK,GAAGkG,KAAQD,KAASD,KAC9BK,mBAAmB,QAAS,CAAEL,IAAK,UAAWC,MAAO,QAASC,KAAM,WAAY,EA2CxFI,EAAcA,KAClB1H,EAAc,IACdG,EAAU,IACVE,EAAY,IACZQ,EAAoB,MACpBS,EAAsB,KAAK,EAGvBqG,EAAoBC,GACpBA,EAAStC,cAAgBsC,EAASnC,SAC7B,CAAEoC,gBAAiB,UAAWC,YAAa,WAE3CF,EAAStC,aACT,CAAEuC,gBAAiB,UAAWC,YAAa,WAE7C,CAAC,EAwHV,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBC,UACrCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iHAAgHC,UAC7HF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,eAAcC,SAAC,wBAIlCjH,IACC+G,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CACJzG,QAASV,EAAaU,QACtBC,KAAMX,EAAaW,KACnBI,QAASf,EAAae,UAGzBrB,IACCqH,EAAAA,EAAAA,KAACK,EAAAA,EAAa,KAGhBL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,MAAA,QAAMG,SAnMCjG,UAGnB,GAFAkG,EAAEC,iBAEGxI,GAAeK,EAApB,CAKAO,GAAW,GAEX,IACE,MAAM6H,EAAW,GAAGnF,EAAAA,WAEdoF,EAAa,IACd7H,EACHiD,MAAOjD,EAAiBiD,MAAMmB,KAAI0D,IAAA,IAAC,aAAEpD,EAAY,SAAEG,KAAakD,GAAMD,EAAA,OAAKC,CAAI,KAG3EhG,QAAiBiG,EAAAA,EAAAA,IAAYJ,EAAUC,GAErB,MAApB9F,EAASH,QACXf,EAAU,6BAA8B,WACxCiG,IACAvF,KAEAV,EAAU,wBAAwBkB,EAASjB,SAAW,kBAAmB,QAE7E,CAAE,MAAOmB,GACPD,QAAQC,MAAM,uBAAwBA,GACtCpB,EAAU,4CAA6C,QACzD,CAAC,QACCd,GAAW,EACb,CA1BA,MAFEc,EAAU,yCAA0C,QA4BtD,EAmKyCwG,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,UAASC,SAAA,EACtBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYC,SAAC,kBAC9BC,EAAAA,EAAAA,MAAA,UACEF,UAAU,cACVa,MAAO9I,EACP+I,SAAWR,GAAMtI,EAAc2E,SAAS2D,EAAES,OAAOF,QACjDG,UAAQ,EAAAf,SAAA,EAERF,EAAAA,EAAAA,KAAA,UAAQc,MAAM,GAAGI,UAAQ,EAAAhB,SAAC,WACzB3H,EAAe0E,KAAKkE,IACnBnB,EAAAA,EAAAA,KAAA,UAAsBc,MAAOK,EAAKnE,GAAGkD,SAClCiB,EAAKC,gBADKD,EAAKnE,aAOxBmD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYC,SAAC,uBAC9BC,EAAAA,EAAAA,MAAA,UACEF,UAAU,cACVa,MAAO3I,EACP4I,SAAWR,GAAMnI,EAAUmI,EAAES,OAAOF,OACpCI,UAAWlJ,EAAWkI,SAAA,EAEtBF,EAAAA,EAAAA,KAAA,UAAQc,MAAM,GAAEZ,SAAC,gBAChBzH,EAAWwE,KAAKP,IACfyD,EAAAA,EAAAA,MAAA,UAAyBW,MAAOpE,EAAIC,OAAOuD,SAAA,CACxCxD,EAAII,UAAU,IAAEJ,EAAIK,WADVL,EAAIC,iBAOvBwD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYC,SAAC,iBAC9BF,EAAAA,EAAAA,KAAA,SACEpG,KAAK,OACLqG,UAAU,eACVa,MAAOzI,EACP0I,SAAWR,GAAMjI,EAAYiI,EAAES,OAAOF,OACtCG,UAAQ,OAIXpI,GA7LOwI,MACxB,IAAKxI,IAAqBA,EAAiBiD,OAA2C,IAAlCjD,EAAiBiD,MAAMhC,OAAc,OAAO,KAEhG,MAAMwH,EAAkB,IAAI1D,IAC5B/E,EAAiBiD,MAAM+B,SAAQkB,IACxBuC,EAAgBC,IAAIxC,EAAKzB,WAC5BgE,EAAgBvD,IAAIgB,EAAKzB,SAAU,IAErCgE,EAAgBrD,IAAIc,EAAKzB,UAAUhB,KAAKyC,EAAK,IAG/C,MAAMyC,EAAW,IAAI,IAAIC,IAAI5I,EAAiBiD,MAAMmB,KAAI8B,GAAQA,EAAKjD,UAAS4F,MAAK,CAACC,EAAGC,IACvE/C,EAAkB8C,GAClB9C,EAAkB+C,KAIlC,OACEzB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,SAAOF,UAAU,uBAAsBC,SAAA,EACrCF,EAAAA,EAAAA,KAAA,SAAAE,UACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,WACHsB,EAASvE,KAAIG,IACZ+C,EAAAA,EAAAA,MAAA,MAAeF,UAAU,cAAaC,SAAA,CACnCT,EAAkBrC,IACnB4C,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,SAC9BrB,EAAkBzB,GAAMsC,mBAAmB,QAAS,CAAEmC,QAAS,cAH3DzE,WASf4C,EAAAA,EAAAA,KAAA,SAAAE,SACG,IAAIoB,EAAgBQ,WAAW7E,KAAI8E,IAA8B,IAA5BzE,EAAU0E,GAAYD,EAC1D,MAAM5J,EAASM,EAAWgE,MAAKwF,GAAKA,EAAEtF,SAAWW,IAC3C4E,EAAa/J,EAAS,GAAGA,EAAO2E,aAAa3E,EAAO4E,WAAa,iBAEvE,OACEoD,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAKgC,IACJV,EAASvE,KAAIG,IACZ,MAAMyC,EAAWmC,EAAYvF,MAAKwF,GAAKA,EAAEnG,QAAUsB,IAEnD,IAAKyC,EACH,OACEG,EAAAA,EAAAA,KAAA,MAAeC,UAAU,yBAAwBC,SAAC,OAAzC9C,GAMb,MAAM+E,EA7GHtD,EA6G+BzB,GA5G9BjE,EA6GJ,MAAMiJ,EAAcvC,EAASxC,WAGvBgF,EAA+B,OAAhBD,GAAwC,OAAhBA,EAAuBxC,EAAiBC,GAAY,CAAC,EAC5FyC,EAA+B,OAAhBF,GAAwC,OAAhBA,EAAuBxC,EAAiBC,GAAY,CAAC,EAElG,OACEM,EAAAA,EAAAA,MAAA,MAAeF,UAAU,cAAaC,SAAA,EACpCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,+BAA8BC,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,SACEpG,KAAK,WACLqG,UAAU,mBACVsC,QAAyB,OAAhBH,GAAwC,OAAhBA,EACjCrB,SAAUA,IAAMpC,EAAqBrB,EAAUF,EAAM,WACrD8D,SAAUiB,EACVK,MAAOH,KAETrC,EAAAA,EAAAA,KAAA,SACEC,UAAW,qBAAoBkC,EAAa,aAAe,IAAKjC,SACjE,UAIHC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,+BAA8BC,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,SACEpG,KAAK,WACLqG,UAAU,mBACVsC,QAAyB,OAAhBH,GAAwC,OAAhBA,EACjCrB,SAAUA,IAAMpC,EAAqBrB,EAAUF,EAAM,WACrD8D,SAAUiB,EACVK,MAAOF,KAETtC,EAAAA,EAAAA,KAAA,SACEC,UAAW,qBAAoBkC,EAAa,aAAe,IAAKjC,SACjE,WA3BI9C,EA+BJ,MApDFE,EAuDJ,UAKb6C,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,OAAKwC,MAAO,CAACC,MAAO,OAAQC,OAAQ,OAAQ5C,gBAAiB,UAAW6C,YAAa,WACrF3C,EAAAA,EAAAA,KAAA,QAAAE,SAAM,2BAERC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,OAAKwC,MAAO,CAACC,MAAO,OAAQC,OAAQ,OAAQ5C,gBAAiB,UAAW6C,YAAa,WACrF3C,EAAAA,EAAAA,KAAA,QAAAE,SAAM,+BAERC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BC,SAAA,EACxCF,EAAAA,EAAAA,KAAA,OAAKwC,MAAO,CAACC,MAAO,OAAQC,OAAQ,OAAQ5C,gBAAiB,UAAW6C,YAAa,WACrF3C,EAAAA,EAAAA,KAAA,QAAAE,SAAM,qBAGN,EA4E6BmB,OAGvBlB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,UACEpG,KAAK,SACLqG,UAAU,uBACViB,SAAUvI,IAAYE,EAAiBqH,SAEtCvH,EAAU,gBAAkB,iBAE/BqH,EAAAA,EAAAA,KAAA,UACEpG,KAAK,SACLqG,UAAU,oBACV2C,QAASjD,EACTuB,SAAUvI,EAAQuH,SACnB,4BAUX,C","sources":["Views/Admin/Apointment/DoctorRoaster/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { DEPARTMENT, DOCTOR, DOCTOR_ROSTER, APPOINTMENT } from \"../../../../config/apiConfig\";\r\nimport { getRequest, putRequest, postRequest } from \"../../../../service/apiService\";\r\nimport LoadingScreen from \"../../../../Components/Loading\";\r\nimport Popup from \"../../../../Components/popup\";\r\n\r\nconst DoctorRoaster = () => {\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [doctor, setDoctor] = useState(\"\");\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [departmentData, setDepartmentData] = useState([]);\r\n  const [doctorData, setDoctorData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [rosterDoctorData, setRosterDoctorData] = useState(null);\r\n  const [popup, setPopup] = useState(\"\");\r\n  const [popupMessage, setPopupMessage] = useState(\"\");\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [originalRosterData, setOriginalRosterData] = useState(null); // To track original data from database\r\n  const jwtToken = \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhYmNAZ21haWwuY29tIiwiaG9zcGl0YWxJZCI6MSwiZW1wbG95ZWVJZCI6MSwiZXhwIjoxNzQ0Mjc5MDc0LCJ1c2VySWQiOjQsImlhdCI6MTc0MzY3NDI3NH0._lLEDlJG85GljjCscLe7l7YHyNAFg0h25JSseZvfvTMA1-7BDwGX7vPRzemg-yHyYm8jAUHREJ_leEst1x20lA\";\r\n\r\n  localStorage.setItem(\"token\", jwtToken);\r\n\r\n  const showPopup = (message, type = \"info\") => {\r\n    setPopupMessage({\r\n      message,\r\n      type,\r\n      onClose: () => {\r\n        setPopupMessage(null);\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDepartmentData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (department) {\r\n      fetchDoctorData();\r\n    }\r\n  }, [department]);\r\n\r\n  useEffect(() => {\r\n    if (department && fromDate) {\r\n      prepareRosterData();\r\n    }\r\n  }, [department, doctor, fromDate, doctorData]);\r\n\r\n  const fetchDepartmentData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getRequest(`${DEPARTMENT}/getAllDepartments/1`);\r\n      if (data.status === 200 && Array.isArray(data.response)) {\r\n        setDepartmentData(data.response);\r\n      } else {\r\n        console.error(\"Unexpected API response format:\", data);\r\n        setDepartmentData([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching Department data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchDoctorData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getRequest(`${DOCTOR}/doctorBySpeciality/${department}`);\r\n      if (data.status === 200 && Array.isArray(data.response)) {\r\n        setDoctorData(data.response);\r\n      } else {\r\n        console.error(\"Unexpected API response format:\", data);\r\n        setDoctorData([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching Doctor data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateDatesFromSelectedDate = () => {\r\n    if (!fromDate) return [];\r\n  \r\n    const startDate = new Date(fromDate);\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0); \r\n  \r\n    const dates = [];\r\n  \r\n    for (let i = 0; i < 7; i++) {\r\n      const currentDate = new Date(startDate);\r\n      currentDate.setDate(startDate.getDate() + i);\r\n      currentDate.setHours(0, 0, 0, 0); \r\n  \r\n      if (currentDate > today) {\r\n        const formattedDate = `${currentDate.getDate().toString().padStart(2, '0')}/${(currentDate.getMonth() + 1).toString().padStart(2, '0')}/${currentDate.getFullYear()}`;\r\n        \r\n        dates.push(formattedDate);\r\n      }\r\n    }\r\n  \r\n    let doctorsToUse = [];\r\n  \r\n    if (doctor) {\r\n      const selectedDoctor = doctorData.find(doc => doc.userId === parseInt(doctor));\r\n      if (selectedDoctor) {\r\n        doctorsToUse = [{\r\n          name: `${selectedDoctor.firstName} ${selectedDoctor.lastName}`,\r\n          id: selectedDoctor.userId\r\n        }];\r\n      }\r\n    } else {\r\n      doctorsToUse = doctorData.map(doc => ({\r\n        name: `${doc.firstName} ${doc.lastName}`,\r\n        id: doc.userId\r\n      }));\r\n    }\r\n  \r\n    const generatedDates = doctorsToUse.flatMap(doctorInfo => \r\n      dates.map(date => ({\r\n        dates: date,\r\n        rosterVale: \"YY\", \r\n        doctorId: doctorInfo.id,\r\n        id: null,\r\n        fromDatabase: false\r\n      }))\r\n    );\r\n  \r\n    return generatedDates;\r\n  };\r\n\r\n  const prepareRosterData = async () => {\r\n    if (!department || !fromDate) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const queryParams = new URLSearchParams({\r\n        deptId: department,\r\n        rosterDate: fromDate,\r\n      });\r\n\r\n      if (doctor) {\r\n        queryParams.append(\"doctorId\", doctor);\r\n      }\r\n\r\n      const apiUrl = `${DOCTOR_ROSTER}/rosterfindWithDays?${queryParams.toString()}`;\r\n      const existingRosterResponse = await getRequest(apiUrl);\r\n\r\n      const generatedDates = generateDatesFromSelectedDate();\r\n\r\n      let mergedDates = [];\r\n      if (existingRosterResponse.response && existingRosterResponse.response.dates) {\r\n        const existingDates = existingRosterResponse.response.dates.map(date => ({\r\n          ...date,\r\n          fromDatabase: true,\r\n          modified: false     \r\n        }));\r\n\r\n        const existingDatesMap = new Map();\r\n        existingDates.forEach(date => {\r\n          const key = `${date.doctorId}-${date.dates}`;\r\n          existingDatesMap.set(key, date);\r\n        });\r\n\r\n        mergedDates = generatedDates.map(genDate => {\r\n          const key = `${genDate.doctorId}-${genDate.dates}`;\r\n          const existingDate = existingDatesMap.get(key);\r\n          \r\n          return existingDate || genDate;\r\n        });\r\n\r\n        existingDates.forEach(existDate => {\r\n          const key = `${existDate.doctorId}-${existDate.dates}`;\r\n          if (!mergedDates.some(md => `${md.doctorId}-${md.dates}` === key)) {\r\n            mergedDates.push(existDate);\r\n          }\r\n        });\r\n      } else {\r\n        mergedDates = generatedDates;\r\n      }\r\n\r\n      const rosterData = {\r\n        departmentId: parseInt(department),\r\n        fromDate: fromDate,\r\n        dates: mergedDates\r\n      };\r\n\r\n      const originalData = JSON.parse(JSON.stringify(rosterData));\r\n      setOriginalRosterData(originalData);\r\n      \r\n      setRosterDoctorData(rosterData);\r\n    } catch (error) {\r\n      console.error(\"Error preparing roster data:\", error);\r\n      showPopup(\"Error preparing roster data\", \"error\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCheckboxChange = (doctorId, date, session) => {\r\n    const formattedDate = formatDateToLocal(date);\r\n    if (formattedDate < currentDate) return;\r\n\r\n    const updatedDates = rosterDoctorData.dates.map(item => {\r\n      if (item.doctorId === doctorId && item.dates === date) {\r\n        let newRosterValue;\r\n        switch(item.rosterVale) {\r\n          case \"YY\":\r\n            newRosterValue = session === 'morning' ? \"NY\" : \"YN\";\r\n            break;\r\n          case \"YN\":\r\n            newRosterValue = session === 'morning' ? \"NN\" : \"YY\";\r\n            break;\r\n          case \"NY\":\r\n            newRosterValue = session === 'morning' ? \"YY\" : \"NN\";\r\n            break;\r\n          case \"NN\":\r\n            newRosterValue = session === 'morning' ? \"YN\" : \"NY\";\r\n            break;\r\n          default:\r\n            newRosterValue = \"YY\";\r\n        }\r\n\r\n        const originalItem = originalRosterData?.dates.find(orig => \r\n          orig.doctorId === doctorId && orig.dates === date\r\n        );\r\n        \r\n        const modified = originalItem ? originalItem.rosterVale !== newRosterValue : false;\r\n\r\n        return { \r\n          ...item, \r\n          rosterVale: newRosterValue,\r\n          modified: item.fromDatabase && modified \r\n        };\r\n      }\r\n      return item;\r\n    });\r\n\r\n    setRosterDoctorData(prev => ({\r\n      ...prev,\r\n      dates: updatedDates\r\n    }));\r\n  };\r\n\r\n  const formatDateToLocal = (dateString) => {\r\n    const [day, month, year] = dateString.split('/');\r\n    return new Date(`${year}-${month}-${day}`);\r\n  };\r\n\r\n  const formatDisplayDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const [day, month, year] = dateString.split('/');\r\n    const date = new Date(`${year}-${month}-${day}`);\r\n    return date.toLocaleDateString('en-US', { day: '2-digit', month: 'short', year: 'numeric' });\r\n  };\r\n\r\n  const isDateDisabled = (dateString) => {\r\n    const rosterDate = formatDateToLocal(dateString);\r\n    return rosterDate < currentDate;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!department || !fromDate) {\r\n      showPopup(\"Please select Department and From Date\", \"error\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const endpoint = `${DOCTOR_ROSTER}/roster`;\r\n      \r\n      const dataToSend = {\r\n        ...rosterDoctorData,\r\n        dates: rosterDoctorData.dates.map(({ fromDatabase, modified, ...rest }) => rest)\r\n      };\r\n      \r\n      const response = await postRequest(endpoint, dataToSend);\r\n\r\n      if (response.status === 200) {\r\n        showPopup(\"Roster saved successfully!\", \"success\");\r\n        handleReset();\r\n        prepareRosterData(); \r\n      } else {\r\n        showPopup(`Error saving roster: ${response.message || \"Unknown error\"}`, \"error\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving roster:\", error);\r\n      showPopup(\"An error occurred while saving the roster\", \"error\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setDepartment(\"\");\r\n    setDoctor(\"\");\r\n    setFromDate(\"\");\r\n    setRosterDoctorData(null);\r\n    setOriginalRosterData(null);\r\n  };\r\n\r\n  const getCheckboxStyle = (dateItem) => {\r\n    if (dateItem.fromDatabase && dateItem.modified) {\r\n      return { backgroundColor: \"#55bf70\", borderColor: \"#55bf70\" }; // Green\r\n    } \r\n    else if (dateItem.fromDatabase) {\r\n      return { backgroundColor: \"#e35d6a\", borderColor: \"#e35d6a\" }; // Red\r\n    }\r\n    return {};\r\n  };\r\n\r\n  const renderRosterTable = () => {\r\n    if (!rosterDoctorData || !rosterDoctorData.dates || rosterDoctorData.dates.length === 0) return null;\r\n\r\n    const doctorRosterMap = new Map();\r\n    rosterDoctorData.dates.forEach(item => {\r\n      if (!doctorRosterMap.has(item.doctorId)) {\r\n        doctorRosterMap.set(item.doctorId, []);\r\n      }\r\n      doctorRosterMap.get(item.doctorId).push(item);\r\n    });\r\n\r\n    const allDates = [...new Set(rosterDoctorData.dates.map(item => item.dates))].sort((a, b) => {\r\n      const dateA = formatDateToLocal(a);\r\n      const dateB = formatDateToLocal(b);\r\n      return dateA - dateB;\r\n    });\r\n\r\n    return (\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Doctor</th>\r\n              {allDates.map(date => (\r\n                <th key={date} className=\"text-center\">\r\n                  {formatDisplayDate(date)}\r\n                  <div className=\"small text-muted\">\r\n                    {formatDateToLocal(date).toLocaleDateString('en-US', { weekday: 'short' })}\r\n                  </div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {[...doctorRosterMap.entries()].map(([doctorId, doctorDates]) => {\r\n              const doctor = doctorData.find(d => d.userId === doctorId);\r\n              const doctorName = doctor ? `${doctor.firstName} ${doctor.lastName}` : 'Unknown Doctor';\r\n\r\n              return (\r\n                <tr key={doctorId}>\r\n                  <td>{doctorName}</td>\r\n                  {allDates.map(date => {\r\n                    const dateItem = doctorDates.find(d => d.dates === date);\r\n                    \r\n                    if (!dateItem) {\r\n                      return (\r\n                        <td key={date} className=\"text-center text-muted\">\r\n                          N/A\r\n                        </td>\r\n                      );\r\n                    }\r\n\r\n                    const isDisabled = isDateDisabled(date);\r\n                    const rosterValue = dateItem.rosterVale;\r\n                    \r\n                    // Get styles based on data source\r\n                    const morningStyle = rosterValue === \"YY\" || rosterValue === \"YN\" ? getCheckboxStyle(dateItem) : {};\r\n                    const eveningStyle = rosterValue === \"YY\" || rosterValue === \"NY\" ? getCheckboxStyle(dateItem) : {};\r\n\r\n                    return (\r\n                      <td key={date} className=\"text-center\">\r\n                        <div className=\"form-check form-check-inline\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            checked={rosterValue === \"YY\" || rosterValue === \"YN\"}\r\n                            onChange={() => handleCheckboxChange(doctorId, date, 'morning')}\r\n                            disabled={isDisabled}\r\n                            style={morningStyle}\r\n                          />\r\n                          <label \r\n                            className={`form-check-label ${isDisabled ? 'text-muted' : ''}`}\r\n                          >\r\n                            M\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            checked={rosterValue === \"YY\" || rosterValue === \"NY\"}\r\n                            onChange={() => handleCheckboxChange(doctorId, date, 'evening')}\r\n                            disabled={isDisabled}\r\n                            style={eveningStyle}\r\n                          />\r\n                          <label \r\n                            className={`form-check-label ${isDisabled ? 'text-muted' : ''}`}\r\n                          >\r\n                            E\r\n                          </label>\r\n                        </div>\r\n                      </td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"mt-2\">\r\n          <div className=\"d-flex align-items-center mb-2\">\r\n            <div style={{width: '20px', height: '20px', backgroundColor: '#e35d6a', marginRight: '10px'}}></div>\r\n            <span>Data from database</span>\r\n          </div>\r\n          <div className=\"d-flex align-items-center mb-2\">\r\n            <div style={{width: '20px', height: '20px', backgroundColor: '#55bf70', marginRight: '10px'}}></div>\r\n            <span>Modified database data</span>\r\n          </div>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div style={{width: '20px', height: '20px', backgroundColor: '#0d6efd', marginRight: '10px'}}></div>\r\n            <span>New data</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"body d-flex py-3\">\r\n      <div className=\"container-xxl\">\r\n        <div className=\"row align-items-center\">\r\n          <div className=\"border-0 mb-4\">\r\n            <div className=\"card-header py-3 bg-transparent d-flex align-items-center px-0 justify-content-between border-bottom flex-wrap\">\r\n              <h3 className=\"fw-bold mb-0\">Doctor Roster</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {popupMessage && (\r\n          <Popup\r\n            message={popupMessage.message}\r\n            type={popupMessage.type}\r\n            onClose={popupMessage.onClose}\r\n          />\r\n        )}\r\n        {loading && (\r\n          <LoadingScreen />\r\n        )}\r\n\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-sm-12\">\r\n            <div className=\"card shadow mb-3\">\r\n              <div className=\"card-body\">\r\n                <form onSubmit={handleSubmit}>\r\n                  <div className=\"row g-3\">\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label\">Department *</label>\r\n                      <select\r\n                        className=\"form-select\"\r\n                        value={department}\r\n                        onChange={(e) => setDepartment(parseInt(e.target.value))}\r\n                        required\r\n                      >\r\n                        <option value=\"\" disabled>Select</option>\r\n                        {departmentData.map((dept) => (\r\n                          <option key={dept.id} value={dept.id}>\r\n                            {dept.departmentName}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label\">Doctor (Optional)</label>\r\n                      <select\r\n                        className=\"form-select\"\r\n                        value={doctor}\r\n                        onChange={(e) => setDoctor(e.target.value)}\r\n                        disabled={!department}\r\n                      >\r\n                        <option value=\"\">All Doctors</option>\r\n                        {doctorData.map((doc) => (\r\n                          <option key={doc.userId} value={doc.userId}>\r\n                            {doc.firstName} {doc.lastName}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label\">From Date *</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        className=\"form-control\"\r\n                        value={fromDate}\r\n                        onChange={(e) => setFromDate(e.target.value)}\r\n                        required\r\n                      />\r\n                    </div>\r\n\r\n                    {rosterDoctorData && renderRosterTable()}\r\n                  </div>\r\n\r\n                  <div className=\"mt-4\">\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"btn btn-primary me-2\"\r\n                      disabled={loading || !rosterDoctorData}\r\n                    >\r\n                      {loading ? 'Processing...' : 'Save Roster'}\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-secondary\"\r\n                      onClick={handleReset}\r\n                      disabled={loading}\r\n                    >\r\n                      Reset\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorRoaster;"],"names":["DoctorRoaster","department","setDepartment","useState","doctor","setDoctor","fromDate","setFromDate","departmentData","setDepartmentData","doctorData","setDoctorData","loading","setLoading","rosterDoctorData","setRosterDoctorData","popup","setPopup","popupMessage","setPopupMessage","currentDate","setCurrentDate","Date","originalRosterData","setOriginalRosterData","localStorage","setItem","showPopup","message","type","arguments","length","undefined","onClose","useEffect","fetchDepartmentData","fetchDoctorData","prepareRosterData","async","data","getRequest","DEPARTMENT","status","Array","isArray","response","console","error","DOCTOR","queryParams","URLSearchParams","deptId","rosterDate","append","apiUrl","DOCTOR_ROSTER","toString","existingRosterResponse","generatedDates","generateDatesFromSelectedDate","startDate","today","setHours","dates","i","setDate","getDate","formattedDate","padStart","getMonth","getFullYear","push","doctorsToUse","selectedDoctor","find","doc","userId","parseInt","name","firstName","lastName","id","map","flatMap","doctorInfo","date","rosterVale","doctorId","fromDatabase","mergedDates","existingDates","modified","existingDatesMap","Map","forEach","key","set","genDate","get","existDate","some","md","rosterData","departmentId","originalData","JSON","parse","stringify","handleCheckboxChange","session","formatDateToLocal","updatedDates","item","newRosterValue","originalItem","orig","prev","dateString","day","month","year","split","formatDisplayDate","toLocaleDateString","handleReset","getCheckboxStyle","dateItem","backgroundColor","borderColor","_jsx","className","children","_jsxs","Popup","LoadingScreen","onSubmit","e","preventDefault","endpoint","dataToSend","_ref","rest","postRequest","value","onChange","target","required","disabled","dept","departmentName","renderRosterTable","doctorRosterMap","has","allDates","Set","sort","a","b","weekday","entries","_ref2","doctorDates","d","doctorName","isDisabled","rosterValue","morningStyle","eveningStyle","checked","style","width","height","marginRight","onClick"],"sourceRoot":""}