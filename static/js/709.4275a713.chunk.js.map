{"version":3,"file":"static/js/709.4275a713.chunk.js","mappings":"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","sources":["Views/Admin/Apointment/DoctorRoaster/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { DEPARTMENT, DOCTOR, DOCTOR_ROSTER, APPOINTMENT } from \"../../../../config/apiConfig\";\r\nimport { getRequest, putRequest, postRequest } from \"../../../../service/apiService\";\r\nimport LoadingScreen from \"../../../../Components/Loading\";\r\nimport Popup from \"../../../../Components/popup\";\r\n\r\n\r\nconst DoctorRoaster = () => {\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [doctor, setDoctor] = useState(\"\");\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [departmentData, setDepartmentData] = useState([]);\r\n  const [doctorData, setDoctorData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [doctorRoasterData, setDoctorRoasterData] = useState(null);\r\n  const [rosterSchedule, setRosterSchedule] = useState([]);\r\n  const [popup, setPopup] = useState(\"\");\r\n  const [popupMessage, setPopupMessage] = useState(\"\");\r\n  const [existingRosterFound, setExistingRosterFound] = useState(false);\r\n\r\n\r\n  const showPopup = (message, type = \"info\") => {\r\n    setPopupMessage({\r\n      message,\r\n      type,\r\n      onClose: () => {\r\n        setPopupMessage(null);\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDepartmentData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (department) {\r\n      fetchDoctorData();\r\n    }\r\n  }, [department]);\r\n\r\n  useEffect(() => {\r\n    if (fromDate) {\r\n      generateDatesFromSelectedDate();\r\n    }\r\n  }, [fromDate, doctorData]);\r\n\r\n  useEffect(() => {\r\n    if (department && fromDate) {\r\n      handleFetchDoctorRoster();\r\n    }\r\n  }, [department, doctor, fromDate]);\r\n\r\n  const fetchDepartmentData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getRequest(`${DEPARTMENT}/getAllDepartments/1`);\r\n      if (data.status === 200 && Array.isArray(data.response)) {\r\n        setDepartmentData(data.response);\r\n      } else {\r\n        console.error(\"Unexpected API response format:\", data);\r\n        setDepartmentData([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching Department data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchDoctorData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getRequest(`${DOCTOR}/doctorBySpeciality/${department}`);\r\n      if (data.status === 200 && Array.isArray(data.response)) {\r\n        setDoctorData(data.response);\r\n      } else {\r\n        console.error(\"Unexpected API response format:\", data);\r\n        setDoctorData([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching Doctor data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Modified to correctly handle the date range (selected date to selected date + 6 days)\r\n  const generateDatesFromSelectedDate = () => {\r\n    if (!fromDate) return;\r\n\r\n    const startDate = new Date(fromDate);\r\n    const dates = [];\r\n\r\n    // Generate 7 dates (from selected date to selected date + 6 days)\r\n    for (let i = 0; i < 7; i++) {\r\n      const currentDate = new Date(startDate);\r\n      currentDate.setDate(startDate.getDate() + i);\r\n      // Format date as DD/MM/YYYY\r\n      const formattedDate = `${currentDate.getDate().toString().padStart(2, '0')}/${(currentDate.getMonth() + 1).toString().padStart(2, '0')}/${currentDate.getFullYear()}`;\r\n      dates.push(formattedDate);\r\n    }\r\n\r\n    let doctorsToUse = [];\r\n\r\n    if (doctor) {\r\n      const selectedDoctor = doctorData.find(doc => doc.userId === parseInt(doctor));\r\n      if (selectedDoctor) {\r\n        doctorsToUse = [{\r\n          name: `${selectedDoctor.firstName} ${selectedDoctor.lastName}`,\r\n          id: selectedDoctor.userId\r\n        }];\r\n      }\r\n    } else {\r\n      doctorsToUse = doctorData.map(doc => ({\r\n        name: `${doc.firstName} ${doc.lastName}`,\r\n        id: doc.userId\r\n      }));\r\n    }\r\n\r\n    const initialSchedule = doctorsToUse.map(doctorInfo => ({\r\n      doctorName: doctorInfo.name,\r\n      doctorId: doctorInfo.id,\r\n      schedule: dates.map(date => ({\r\n        date,\r\n        morning: true, // Default to true as per requirement \"YY\"\r\n        evening: true  // Default to true as per requirement \"YY\"\r\n      }))\r\n    }));\r\n\r\n    setRosterSchedule(initialSchedule);\r\n  };\r\n\r\n  const handleFetchDoctorRoster = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const queryParams = new URLSearchParams({\r\n        deptId: department,\r\n        rosterDate: fromDate,\r\n      });\r\n\r\n      if (doctor) {\r\n        queryParams.append(\"doctorId\", doctor);\r\n      }\r\n\r\n      const apiUrl = `${DOCTOR_ROSTER}/rosterfind?${queryParams.toString()}`;\r\n      const data = await getRequest(apiUrl);\r\n      setDoctorRoasterData(data);\r\n      \r\n      // Check if data exists to determine if this is a create or update operation\r\n      setExistingRosterFound(data && Array.isArray(data) && data.length > 0);\r\n\r\n      if (data && Array.isArray(data) && data.length > 0) {\r\n        const updatedSchedule = [...rosterSchedule];\r\n\r\n        data.forEach(item => {\r\n          const doctorIndex = updatedSchedule.findIndex(d => d.doctorName === item.doctorName);\r\n          if (doctorIndex !== -1) {\r\n            const dateIndex = updatedSchedule[doctorIndex].schedule.findIndex(s => s.date === item.date);\r\n            if (dateIndex !== -1) {\r\n              if (item.rosterValue === \"YN\") {\r\n                updatedSchedule[doctorIndex].schedule[dateIndex].morning = true;\r\n                updatedSchedule[doctorIndex].schedule[dateIndex].evening = false;\r\n              } else if (item.rosterValue === \"NY\") {\r\n                updatedSchedule[doctorIndex].schedule[dateIndex].morning = false;\r\n                updatedSchedule[doctorIndex].schedule[dateIndex].evening = true;\r\n              } else if (item.rosterValue === \"YY\") {\r\n                updatedSchedule[doctorIndex].schedule[dateIndex].morning = true;\r\n                updatedSchedule[doctorIndex].schedule[dateIndex].evening = true;\r\n              } else if (item.rosterValue === \"NN\") {\r\n                updatedSchedule[doctorIndex].schedule[dateIndex].morning = false;\r\n                updatedSchedule[doctorIndex].schedule[dateIndex].evening = false;\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        setRosterSchedule(updatedSchedule);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching Doctor Roster data:\", error);\r\n      setExistingRosterFound(false);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCheckboxChange = (doctorIndex, dateIndex, session) => {\r\n    const updatedSchedule = [...rosterSchedule];\r\n    updatedSchedule[doctorIndex].schedule[dateIndex][session] =\r\n      !updatedSchedule[doctorIndex].schedule[dateIndex][session];\r\n    setRosterSchedule(updatedSchedule);\r\n  };\r\n\r\n  const formatDateToISO = (dateString) => {\r\n    const [day, month, year] = dateString.split('/');\r\n    return `${year}-${month}-${day}T00:00:00.000Z`;\r\n  };\r\n\r\n  const getRosterValue = (morning, evening) => {\r\n    if (morning && evening) return \"YY\";\r\n    if (morning && !evening) return \"YN\";\r\n    if (!morning && evening) return \"NY\";\r\n    return \"NN\";\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!department || !fromDate) {\r\n      alert(\"Please fill all required fields\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const dates = [];\r\n\r\n      rosterSchedule.forEach(doctorItem => {\r\n        doctorItem.schedule.forEach(dateItem => {\r\n          const rosterValue = getRosterValue(dateItem.morning, dateItem.evening);\r\n\r\n          dates.push({\r\n            dates: formatDateToISO(dateItem.date),\r\n            rosterVale: rosterValue,  // Note: There's a typo here in the original code (\"rosterVale\" instead of \"rosterValue\")\r\n            doctorId: doctorItem.doctorId,\r\n            id: 0\r\n          });\r\n        });\r\n      });\r\n\r\n      const submitData = {\r\n        departmentId: parseInt(department),\r\n        fromDate: fromDate,\r\n        dates: dates\r\n      };\r\n\r\n      // Use a single endpoint for both create and update\r\n      const endpoint = `${DOCTOR_ROSTER}/roster`;\r\n      // Select the appropriate method based on whether existing data was found\r\n      const requestMethod = existingRosterFound ? putRequest : postRequest;\r\n\r\n      const response = await requestMethod(endpoint, submitData);\r\n\r\n      if (response.status === 200) {\r\n        showPopup(`Roster ${existingRosterFound ? \"updated\" : \"added\"} successfully!`, \"success\");\r\n        // After successful submission, fetch the roster again to ensure we have the latest data\r\n        handleFetchDoctorRoster();\r\n      } else {\r\n        showPopup(`Error ${existingRosterFound ? \"updating\" : \"adding\"} roster: ${response.message || \"Unknown error\"}`, \"error\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving/updating roster:\", error);\r\n      showPopup(\"An error occurred while saving the roster\", \"error\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setDepartment(\"\");\r\n    setDoctor(\"\");\r\n    setFromDate(\"\");\r\n    setDoctorRoasterData(null);\r\n    setRosterSchedule([]);\r\n    setExistingRosterFound(false);\r\n  };\r\n\r\n  // Helper function to display dates in a more readable format (e.g., \"21 Mar 2025\")\r\n  const formatDisplayDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const [day, month, year] = dateString.split('/');\r\n    const date = new Date(`${year}-${month}-${day}`);\r\n    return date.toLocaleDateString('en-US', { day: '2-digit', month: 'short', year: 'numeric' });\r\n  };\r\n\r\n  const getDisplayDates = () => {\r\n    if (!fromDate || rosterSchedule.length === 0 || rosterSchedule[0].schedule.length === 0) {\r\n      return Array(7).fill(null).map((_, i) => `Date ${i + 1}`);\r\n    }\r\n    return rosterSchedule[0].schedule.map(s => formatDisplayDate(s.date));\r\n  };\r\n\r\n  return (\r\n    <div className=\"body d-flex py-3\">\r\n      <div className=\"container-xxl\">\r\n        <div className=\"row align-items-center\">\r\n          <div className=\"border-0 mb-4\">\r\n            <div className=\"card-header py-3 bg-transparent d-flex align-items-center px-0 justify-content-between border-bottom flex-wrap\">\r\n              <h3 className=\"fw-bold mb-0\">Doctor Roster</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {popupMessage && (\r\n          <Popup\r\n            message={popupMessage.message}\r\n            type={popupMessage.type}\r\n            onClose={popupMessage.onClose}\r\n          />\r\n        )}\r\n        {loading && (\r\n          <LoadingScreen />\r\n        )}\r\n\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-sm-12\">\r\n            <div className=\"card shadow mb-3\">\r\n              <div className=\"card-body\">\r\n                <form onSubmit={handleSubmit}>\r\n                  <div className=\"row g-3\">\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label\">Department *</label>\r\n                      <select\r\n                        className=\"form-select\"\r\n                        value={department}\r\n                        onChange={(e) => setDepartment(parseInt(e.target.value))}\r\n                        required\r\n                      >\r\n                        <option value=\"\" disabled>Select</option>\r\n                        {departmentData.map((dept) => (\r\n                          <option key={dept.id} value={dept.id}>\r\n                            {dept.departmentName}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label\">Doctor (Optional)</label>\r\n                      <select\r\n                        className=\"form-select\"\r\n                        value={doctor}\r\n                        onChange={(e) => setDoctor(e.target.value)}\r\n                        disabled={!department}\r\n                      >\r\n                        <option value=\"\">All Doctors</option>\r\n                        {doctorData.map((doc) => (\r\n                          <option key={doc.userId} value={doc.userId}>\r\n                            {doc.firstName} {doc.lastName}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label\">From Date *</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        className=\"form-control\"\r\n                        value={fromDate}\r\n                        onChange={(e) => setFromDate(e.target.value)}\r\n                        required\r\n                      />\r\n                    </div>\r\n\r\n                    {rosterSchedule.length > 0 && (\r\n                      <div className=\"col-md-12 mt-4\">\r\n                        <div className=\"table-responsive\">\r\n                          <table className=\"table table-bordered\">\r\n                            <thead>\r\n                              <tr>\r\n                                <th>Doctor</th>\r\n                                {getDisplayDates().map((date, i) => (\r\n                                  <th key={i} className=\"text-center\">\r\n                                    {date}\r\n                                    <div className=\"small text-muted\">\r\n                                      {rosterSchedule[0].schedule[i] ? \r\n                                        new Date(formatDateToISO(rosterSchedule[0].schedule[i].date))\r\n                                          .toLocaleDateString('en-US', { weekday: 'short' }) : \r\n                                        ''}\r\n                                    </div>\r\n                                  </th>\r\n                                ))}\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              {rosterSchedule.map((doctorItem, doctorIndex) => (\r\n                                <tr key={doctorIndex}>\r\n                                  <td>{doctorItem.doctorName}</td>\r\n                                  {doctorItem.schedule.map((dateItem, dateIndex) => (\r\n                                    <td key={dateIndex} className=\"text-center\">\r\n                                      <div className=\"form-check form-check-inline\">\r\n                                        <input\r\n                                          type=\"checkbox\"\r\n                                          className=\"form-check-input\"\r\n                                          id={`morning-${doctorIndex}-${dateIndex}`}\r\n                                          checked={dateItem.morning}\r\n                                          onChange={() => handleCheckboxChange(doctorIndex, dateIndex, 'morning')}\r\n                                        />\r\n                                        <label className=\"form-check-label\" htmlFor={`morning-${doctorIndex}-${dateIndex}`}>M</label>\r\n                                      </div>\r\n                                      <div className=\"form-check form-check-inline\">\r\n                                        <input\r\n                                          type=\"checkbox\"\r\n                                          className=\"form-check-input\"\r\n                                          id={`evening-${doctorIndex}-${dateIndex}`}\r\n                                          checked={dateItem.evening}\r\n                                          onChange={() => handleCheckboxChange(doctorIndex, dateIndex, 'evening')}\r\n                                        />\r\n                                        <label className=\"form-check-label\" htmlFor={`evening-${doctorIndex}-${dateIndex}`}>E</label>\r\n                                      </div>\r\n                                    </td>\r\n                                  ))}\r\n                                </tr>\r\n                              ))}\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"mt-4\">\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"btn btn-primary me-2\"\r\n                      disabled={loading || rosterSchedule.length === 0}\r\n                    >\r\n                      {loading ? 'Processing...' : (existingRosterFound ? 'Update Roster' : 'Save Roster')}\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-secondary\"\r\n                      onClick={handleReset}\r\n                      disabled={loading}\r\n                    >\r\n                      Reset\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorRoaster;"],"names":["DoctorRoaster","department","setDepartment","useState","doctor","setDoctor","fromDate","setFromDate","departmentData","setDepartmentData","doctorData","setDoctorData","loading","setLoading","doctorRoasterData","setDoctorRoasterData","rosterSchedule","setRosterSchedule","popup","setPopup","popupMessage","setPopupMessage","existingRosterFound","setExistingRosterFound","showPopup","message","type","arguments","length","undefined","onClose","useEffect","fetchDepartmentData","fetchDoctorData","generateDatesFromSelectedDate","handleFetchDoctorRoster","async","data","getRequest","DEPARTMENT","status","Array","isArray","response","console","error","DOCTOR","startDate","Date","dates","i","currentDate","setDate","getDate","formattedDate","toString","padStart","getMonth","getFullYear","push","doctorsToUse","selectedDoctor","find","doc","userId","parseInt","name","firstName","lastName","id","map","initialSchedule","doctorInfo","doctorName","doctorId","schedule","date","morning","evening","queryParams","URLSearchParams","deptId","rosterDate","append","apiUrl","DOCTOR_ROSTER","updatedSchedule","forEach","item","doctorIndex","findIndex","d","dateIndex","s","rosterValue","handleCheckboxChange","session","formatDateToISO","dateString","day","month","year","split","_jsx","className","children","_jsxs","Popup","LoadingScreen","onSubmit","e","preventDefault","doctorItem","dateItem","getRosterValue","rosterVale","submitData","departmentId","endpoint","requestMethod","putRequest","postRequest","alert","value","onChange","target","required","disabled","dept","departmentName","toLocaleDateString","formatDisplayDate","fill","_","weekday","checked","htmlFor","onClick","handleReset"],"sourceRoot":""}